{"version":3,"file":"material.umd.js","sources":["../../src/lib/index.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/core/portal/portal-injector.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/form-field/index.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/form-field/error.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/core.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/option/index.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/version.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {VERSION,coerceBooleanProperty,coerceNumberProperty,ObserversModule,ObserveContent,Dir,Direction,Directionality,BidiModule,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,MD_ERROR_GLOBAL_OPTIONS,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MdAutocompleteModule,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {mixinColor as ɵd} from './core/common-behaviors/color';\nexport {mixinDisabled as ɵc} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵb} from './core/coordination/unique-selection-dispatcher';\nexport {RippleRenderer as ɵa} from './core/ripple/ripple-renderer';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../core';\nimport {MdTooltip, TooltipComponent, MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  OverlayState,\n  RepositionScrollStrategy,\n  ScrollDispatcher,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    this._setTooltipMessage(this._message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._enterListener =\n        _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      this._leaveListener =\n        _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._enterListener();\n      this._leaveListener();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.panelClass = TOOLTIP_PANEL_CLASS;\n    config.scrollStrategy = this._scrollStrategy();\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._enterListener;\n/** @type {?} */\nMdTooltip.prototype._leaveListener;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '../core/bidi/index';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, StyleModule, BidiModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {HammerInput} from '../core';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n    this._focusOriginMonitor\n        .monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MdCommonModule, MdOptionModule} from '../core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect, MdSelectTrigger],\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n  Directive,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {filter, startWith} from '@angular/cdk/rxjs';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n  ViewportRuler\n} from '@angular/cdk/overlay';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\nimport {SelectionModel} from '../core/selection/selection';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdOptgroup, MdOption, MdOptionSelectionChange} from '../core/option/index';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions\n} from '../core/placeholder/placeholder-options';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-select-trigger, mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription | null;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _overlay\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _overlay: Overlay,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._setSelectionByValue(this._control ? this._control.value : this._value);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    let /** @type {?} */ correspondingOption = this.options.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (this._getLabelCountBeforeOption(0) * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Overlay, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._overlay;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '../core';\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n   _mdDialogClose: any;\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\n        changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[md-dialog-close], button[mat-dialog-close],\n             button[mdDialogClose], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\n             [mdDialogContent], [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\n             [mdDialogActions], [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _scrollStrategy\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _scrollStrategy,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._scrollStrategy();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */(( null))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  NgZone,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n\n    const /** @type {?} */ componentRef = this._portalHost.attachComponentPortal(portal);\n\n    // Ensure that the initial view change are picked up.\n    componentRef.changeDetectorRef.markForCheck();\n\n    return componentRef;\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n\n    const /** @type {?} */ locals = this._portalHost.attachTemplatePortal(portal);\n\n    this._changeDetectorRef.markForCheck();\n\n    return locals;\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n// TODO(jelbourn): afterOpen and beforeClose\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\n\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => this._overlayRef.detachBackdrop());\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdOptionModule, MdCommonModule} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {\n  MdAutocompleteTrigger,\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {MdFormField} from '../form-field/index';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {MdOption, MdOptionSelectionChange} from '../core/option/option';\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!formField || !formField.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      if (this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\n      this._formField.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._formField.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex ?\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT : 0;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable);\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._scrollStrategy();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdAutocomplete], input[matAutocomplete],\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdError} from './error';\nimport {MdFormField} from './form-field';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\n\n\nexport {MdError} from './error';\nexport {MdFormField} from './form-field';\nexport {MdFormFieldControl} from './form-field-control';\nexport {getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError} from './form-field-errors';\nexport {MdHint} from './hint';\nexport {MdPlaceholder} from './placeholder';\nexport {MdPrefix} from './prefix';\nexport {MdSuffix} from './suffix';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {\n  getMdFormFieldDuplicatedHintError,\n  getMdFormFieldMissingControlError,\n  getMdFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions\n} from '../core/placeholder/placeholder-options';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {MdError} from './error';\nimport {MdFormFieldControl} from './form-field-control';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\n   _control: MdFormFieldControl<any>;\n   _placeholderChild: MdPlaceholder;\n   _errorChildren: QueryList<MdError>;\n   _hintChildren: QueryList<MdHint>;\n   _prefixChildren: QueryList<MdPrefix>;\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMdFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(mdError => mdError.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMdFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\n  // MdInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_control.focus()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Focuses this control.\n * @abstract\n * @return {?}\n */\nfocus() {}\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n}\n\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\n      'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MdLineModule} from './line/line';\nimport {MdOptionModule} from './option/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n// Re-exports of the CDK to avoid breaking changes.\nexport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n} from '@angular/cdk/coercion';\n\nexport {\n  ObserversModule,\n  ObserveContent,\n} from '@angular/cdk/observers';\n\n// RTL\nexport {Dir, Direction, Directionality, BidiModule} from './bidi/index';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from '@angular/cdk/platform';\n\n// Overlay\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from '@angular/cdk/overlay';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n  InteractivityChecker,\n  FocusTrap,\n  FocusTrapFactory,\n  FocusTrapDeprecatedDirective,\n  FocusTrapDirective,\n  isFakeMousedownFromScreenReader,\n  A11yModule,\n} from '@angular/cdk/a11y';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\n\n// Error\nexport {\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS,\n  defaultErrorStateMatcher,\n  showOnDirtyErrorStateMatcher\n} from './error/error-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserversModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserversModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MD_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('md-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MdDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const /** @type {?} */ MD_DATE_FORMATS = new InjectionToken<MdDateFormats>('md-date-formats');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional, LOCALE_ID} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} localeId\n */\nconstructor(  localeId: any) {\n    super();\n    super.setLocale(localeId);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Platform} from '../platform/platform';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ cachedInfo = this._elementInfo.get(element); /** @type {?} */((\n      cachedInfo)).checkChildren = checkChildren;\n      return /** @type {?} */(( cachedInfo)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {MdRipple} from './ripple';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/overlay';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('2.0.0-beta.8');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["OverlayState","ComponentPortal","coerceBooleanProperty","HAMMER_GESTURE_CONFIG","ViewChild","Output","Input","Directionality","Optional","ChangeDetectorRef","ElementRef","UP_ARROW","HOME","END","PAGE_DOWN","PAGE_UP","coerceNumberProperty","tslib_1.__extends","forwardRef","ContentChildren","Inject","ViewportRuler","ViewEncapsulation","Component","filter","DOWN_ARROW","ENTER","SPACE","merge","EventEmitter","Directive","Overlay","transition","animate","state","style","trigger","A11yModule","PortalModule","OverlayModule","CommonModule","NgModule","Location","Injector","Injectable","startWith","Subject","InjectionToken","PortalHostDirective","FocusTrapFactory","NgZone","ChangeDetectionStrategy","TemplatePortal","switchMap","RxChain","map","ESCAPE","fromEvent","of","NG_VALUE_ACCESSOR","PlatformModule","ContentChild","TemplateRef","ObserversModule","BidiModule","LOCALE_ID","SkipSelf","Platform","Renderer2","isDevMode","VIEWPORT_RULER_PROVIDER","DOCUMENT","Version"],"mappings":"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"}