{"version":3,"file":"material.umd.js","sources":["../../src/lib/index.ts","../../src/lib/public_api.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/input/input-container.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/core/a11y/list-key-manager.ts","../../src/lib/core/core.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/coercion/number-property.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/a11y/index.ts","../../src/lib/core/a11y/live-announcer.ts","../../src/lib/core/a11y/focus-trap.ts","../../src/lib/core/a11y/interactivity-checker.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/portal/dom-portal-host.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/portal/portal-directives.ts","../../src/lib/core/portal/portal.ts","../../src/lib/core/portal/portal-errors.ts","../../src/lib/core/option/option.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/noop-scroll-strategy.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/platform/index.ts","../../src/lib/core/platform/features.ts","../../src/lib/core/platform/platform.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/coercion/boolean-property.ts","../../src/lib/core/keyboard/keycodes.ts","../../src/lib/core/observe-content/observe-content.ts","../../src/lib/core/rtl/dir.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,MdOptionModule,MdOption,MdOptionSelectionChange,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MdCoreModule,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,MATERIAL_SANITY_CHECKS,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger,MdInputModule,MdTextareaAutosize,FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {LIVE_ANNOUNCER_PROVIDER_FACTORY as ɵi} from './core/a11y/live-announcer';\nexport {mixinDisabled as ɵl} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵj} from './core/coordination/unique-selection-dispatcher';\nexport {MdMutationObserverFactory as ɵa} from './core/observe-content/observe-content';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵc,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵb} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵk} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵe,VIEWPORT_RULER_PROVIDER_FACTORY as ɵd} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵg,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵf} from './core/overlay/scroll/scroll-dispatcher';\nexport {RippleRenderer as ɵh} from './core/ripple/ripple-renderer';","/**\n * @module\n * @description\n * Entry point for all public APIs of Angular Material.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,MdOptionModule,MdOption,MdOptionSelectionChange,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MdCoreModule,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,MATERIAL_SANITY_CHECKS,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './core';\n// export * from './module';\n\nexport {MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete/index';\n// export * from './button/index';\n// export * from './button-toggle/index';\n// export * from './card/index';\n// export * from './chips/index';\n// export * from './checkbox/index';\n// export * from './datepicker/index';\n// export * from './dialog/index';\n// export * from './grid-list/index';\n// export * from './icon/index';\nexport {MdInputModule,MdTextareaAutosize,FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input/index';\n// export * from './list/index';\n// export * from './menu/index';\n// export * from './progress-bar/index';\n// export * from './progress-spinner/index';\n// export * from './radio/index';\n// export * from './select/index';\n// export * from './sidenav/index';\nexport {MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider/index';\n// export * from './slide-toggle/index';\n// export * from './snack-bar/index';\n// export * from './tabs/index';\n// export * from './tabs/tab-nav-bar/index';\n// export * from './toolbar/index';\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip/index';\n","import {NgModule} from '@angular/core';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [OverlayModule, MdCommonModule, PlatformModule],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n  RepositionScrollStrategy,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Dir} from '../core/rtl/dir';\nimport {Platform} from '../core/platform/index';\nimport'rxjs/add/operator/first';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Throws an error if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdTooltipInvalidPositionError(position: string) {\n  throw new Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef;\n  _tooltipInstance: TooltipComponent;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    if (this._tooltipInstance) {\n      this._setTooltipMessage(this._message);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _dir: Dir) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipMessage(this._message);\n    this._tooltipInstance.show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = this._overlayRef.attach(portal).instance;\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance.afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): void {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.scrollStrategy =\n        new RepositionScrollStrategy(this._scrollDispatcher, SCROLL_THROTTLE_MS);\n\n    this._overlayRef = this._overlay.create(config);\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    this._tooltipInstance.message = message;\n    this._tooltipInstance._markForCheck();\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (this._tooltipInstance) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throwMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {RtlModule} from '../core/rtl/dir';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, MdCommonModule, StyleModule, RtlModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer = null;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number = null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number = null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {coerceBooleanProperty} from '../coercion/boolean-property';\n\n\n/** @docs-private */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","import {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Input, AfterViewInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @deprecated Use mdAutosizeMinRows\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @deprecated Use mdAutosizeMaxRows\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * Minimum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMinRows(): number { return this.minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMinRows(value: number) { this.minRows = value; }\n/**\n * Maximum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMaxRows(): number { return this.maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMaxRows(value: number) { this.maxRows = value; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input },],\n'maxRows': [{ type: Input },],\n'mdAutosizeMinRows': [{ type: Input },],\n'mdAutosizeMaxRows': [{ type: Input },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal, RepositionScrollStrategy} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {MdInputContainer} from '../input/input-container';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/switchMap';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _changeDetectorRef\n * @param {?} _scrollDispatcher\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (this._document) {\n      return Observable.fromEvent(this._document, 'click').filter((event: MouseEvent) => {\n        const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n        const /** @type {?} */ inputContainer = this._inputContainer ?\n            this._inputContainer._elementRef.nativeElement : null;\n\n        return this._panelOpen &&\n               clickTarget !== this._element.nativeElement &&\n               (!inputContainer || !inputContainer.contains(clickTarget)) &&\n               !this._overlayRef.overlayElement.contains(clickTarget);\n      });\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = new RepositionScrollStrategy(this._scrollDispatcher);\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: ChangeDetectorRef, },\n{type: ScrollDispatcher, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollDispatcher;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\n\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n  // Whether to align the hint label at the start or end of the line.\n   align: 'start' | 'end' = 'start';\n\n  // Unique ID for the hint. Used for the aria-describedby on the input.\n   id: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    '[class.mat-hint]': 'true',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/** @type {?} */\nMdHint.prototype.align;\n/** @type {?} */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    '[class.mat-input-error]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _ngControl\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\npublic _ngControl: NgControl) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    return ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n    return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    '[class.mat-input-element]': 'true',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\n/**\n * Alignment of the input container's content.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether we should hide the required marker.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType = 'auto';\n\n   underlineRef: ElementRef;\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Whether the input container is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._mdInputChild._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n      let /** @type {?} */ startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n      let /** @type {?} */ endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n      if (startHint) {\n        ids.push(startHint.id);\n      } else if (this._hintLabel) {\n        ids.push(this._hintLabelId);\n      }\n\n      if (endHint) {\n        ids.push(endHint.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprivate _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    '[class.mat-input-container]': 'true',\n    '[class.mat-input-invalid]': '_isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/**\n * Alignment of the input container's content.\n * @type {?}\n */\nMdInputContainer.prototype.align;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/** @type {?} */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdInputContainer.prototype._parentForm;\n/** @type {?} */\nMdInputContainer.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return new Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return new Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return new Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return new Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: (value: any) => string;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    '[class.mat-autocomplete]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","import {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB, HOME, END} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This interface is for items that can be disabled. The type passed into\n * ListKeyManager must extend this interface.\n */\nexport interface CanDisable {\n  disabled?: boolean;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends CanDisable> {\nprivate _activeItemIndex: number = null;\nprivate _activeItem: T;\nprivate _tabOut = new Subject<void>();\nprivate _wrap: boolean = false;\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) {\n  }\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * \n * @return {?} The ListKeyManager that the method was called on.\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * \n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        this.setNextItemActive();\n        break;\n      case UP_ARROW:\n        this.setPreviousItemActive();\n        break;\n      case HOME:\n        this.setFirstItemActive();\n        break;\n      case END:\n        this.setLastItemActive();\n        break;\n      case TAB:\n        // Note that we shouldn't prevent the default action on tab.\n        this._tabOut.next(null);\n        return;\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  }\n/**\n * Returns the index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number {\n    return this._activeItemIndex;\n  }\n/**\n * Returns the currently active item.\n * @return {?}\n */\nget activeItem(): T {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n                                                 : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * Observable that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @return {?}\n */\nget tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._tabOut;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n\n","import {NgModule} from '@angular/core';\nimport {MdLineModule} from './line/line';\nimport {RtlModule} from './rtl/dir';\nimport {ObserveContentModule} from './observe-content/observe-content';\nimport {MdOptionModule} from './option/option';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/overlay-directives';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n\n// RTL\nexport {Dir, LayoutDirection, RtlModule} from './rtl/dir';\n\n// Mutation Observer\nexport {ObserveContentModule, ObserveContent} from './observe-content/observe-content';\n\nexport {MdOptionModule, MdOption, MdOptionSelectionChange} from './option/option';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,MATERIAL_SANITY_CHECKS,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Coercion\nexport {coerceBooleanProperty} from './coercion/boolean-property';\nexport {coerceNumberProperty} from './coercion/number-property';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","import {DateAdapter} from './date-adapter';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  return Array.apply(null, Array(length)).map((v: undefined, i: number) => valueFunction(i));\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11 || date < 1) {\n      return null;\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to\n    // overflow.\n    if (result.getMonth() != month) {\n      return null;\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @param {?} parseFormat\n * @return {?}\n */\nparse(value: any, parseFormat: Object): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    let /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n    return isNaN(timestamp) ? null : new Date(timestamp);\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} s The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(s: string) {\n    return s.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to parse.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Platform} from '../platform/platform';\n\nimport'rxjs/add/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return Observable.of();\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element);\n      info.checkChildren = checkChildren;\n      return info.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: null,\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element, null);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} renderer The renderer to use to invoke the focus method on the element.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, renderer: Renderer2, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin: FocusOrigin): void {\n    let /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n    let /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n      shouldSet ? renderer.addClass(element, className) : renderer.removeClass(element, className);\n    };\n\n    toggleClass('cdk-focused', !!origin);\n    toggleClass('cdk-touch-focused', origin === 'touch');\n    toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n    toggleClass('cdk-mouse-focused', origin === 'mouse');\n    toggleClass('cdk-program-focused', origin === 'program');\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    this._elementInfo.get(element).subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element, null);\n    this._elementInfo.get(element).subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","import {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {FocusTrapDirective, FocusTrapDeprecatedDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../platform/index';\nexport class A11yModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Injectable,\n  InjectionToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '../platform/platform';\n\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement>('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n * @param {?} platform\n */\nconstructor(\n        elementToken: any,\n      platform: Platform) {\n    // Only do anything if we're on the browser platform.\n    if (platform.isBrowser) {\n      // We inject the live element as `any` because the constructor signature cannot reference\n      // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n      // causes TypeScript to preserve the constructor signature types.\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * Removes the aria-live element from the DOM.\n * @return {?}\n */\n_removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n{type: Platform, },\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} platform\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, platform: Platform) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, platform);\n}\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    Platform,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n\nimport'rxjs/add/operator/first';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement;\nprivate _endAnchor: HTMLElement;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n    });\n  }\n/**\n * Waits for microtask queue to empty, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusFirstTabbableElement());\n  }\n/**\n * Waits for microtask queue to empty, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusLastTabbableElement());\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElement() {\n    let /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-start]') as HTMLElement)) ||\n                            this._getFirstTabbableElement(this._element);\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElement() {\n    let /** @type {?} */ focusTargets = this._element.querySelectorAll('[cdk-focus-end]');\n    let /** @type {?} */ redirectToElement: HTMLElement = null;\n\n    if (focusTargets.length) {\n      redirectToElement = /** @type {?} */(( focusTargets[focusTargets.length - 1] as HTMLElement));\n    } else {\n      redirectToElement = this._getLastTabbableElement(this._element);\n    }\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _ngZone\n */\nconstructor(private _checker: InteractivityChecker,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Platform} from '../platform/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    NgModule,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {RepositionScrollStrategy} from './scroll/reposition-scroll-strategy';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {ScrollDispatcher} from './scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatchModule} from './scroll/index';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = new RepositionScrollStrategy(this._scrollDispatcher);\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} _scrollDispatcher\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\nprivate _scrollDispatcher: ScrollDispatcher,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: ScrollDispatcher, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'scrollStrategy': [{ type: Input },],\n'open': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._scrollDispatcher;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(private _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {}\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n/**\n * Providers for Overlay and its related injectables.\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?} value New top offset.\n * @return {?}\n */\ntop(value: string): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New left offset.\n * @return {?}\n */\nleft(value: string): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?} value New bottom offset.\n * @return {?}\n */\nbottom(value: string): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New right offset.\n * @return {?}\n */\nright(value: string): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?} value New width for the overlay\n * @return {?}\n */\nwidth(value: string): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?} value New height for the overlay\n * @return {?}\n */\nheight(value: string): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    if (!this._wrapper) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n\n    return Promise.resolve(null);\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","import {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint = null;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair = null;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return Promise.resolve(null);\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, fallbackPoint, fallbackPosition);\n\n    return Promise.resolve(null);\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n    const /** @type {?} */  viewport = this._viewportRuler.getViewportRect();\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        viewport.height - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      viewport.width - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea?: number;\n  fitsInViewport?: boolean;\n}\n","/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) {\n\n    this._state.scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._attachments.next();\n    this._state.scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._state.scrollStrategy.disable();\n    this._detachments.next();\n\n    return this._portalHost.detach();\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._state.scrollStrategy.disable();\n    this._detachments.next();\n    this._detachments.complete();\n    this._attachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","import {PositionStrategy} from './position/position-strategy';\nimport {LayoutDirection} from '../rtl/dir';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = new NoopScrollStrategy();\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","import {\n    NgModule,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throwNoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any>;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: () => void;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\n  throw new Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw new Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\n  throw new Error('This PortalHost has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\n  throw new Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either' +\n                  'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\n  throw new Error('Attempting to attach a portal to a null PortalHost');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\n  throw new Error('Attempting to detach a portal that is not attached to a host');\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * Color of the checkbox.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.removeClass(nativeElement, `mat-${this.color}`);\n      this._renderer.addClass(nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2) {\n    this.color = 'accent';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n/** @type {?} */\nMdPseudoCheckbox.prototype._color;\n/** @type {?} */\nMdPseudoCheckbox.prototype._elementRef;\n/** @type {?} */\nMdPseudoCheckbox.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: null, left: null };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left;\n      this._previousHTMLStyles.top = root.style.top;\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","import {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","import {ScrollStrategy} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(null, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","import {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _scrollThrottle\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher,\nprivate _scrollThrottle = 0) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(this._scrollThrottle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollThrottle;\n}\n\n","import {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","let /** @type {?} */ supportedInputTypes: Set<string>;\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  if (!supportedInputTypes) {\n    let /** @type {?} */ featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set([\n      // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n      // first changing it to something else:\n      // The specified value \"\" does not conform to the required format.\n      // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n      'color',\n      'button',\n      'checkbox',\n      'date',\n      'datetime-local',\n      'email',\n      'file',\n      'hidden',\n      'image',\n      'month',\n      'number',\n      'password',\n      'radio',\n      'range',\n      'reset',\n      'search',\n      'submit',\n      'tel',\n      'text',\n      'time',\n      'url',\n      'week',\n    ].filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }));\n  }\n  return supportedInputTypes;\n}\n","import {Injectable} from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  isBrowser: boolean = typeof document === 'object' && !!document;\n/**\n * Layout Engines\n */\nEDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK = this.isBrowser && !!(( /** @type {?} */((window as any))).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/** @type {?} */\nPlatform.prototype.isBrowser;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => this._triggerElement.removeEventListener(type, fn));\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","import {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\n\nexport const /** @type {?} */ UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\n\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\n\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\n\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\n\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\n","import {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport'rxjs/add/operator/debounceTime';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver {\n    return new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._debouncer\n        .debounceTime(this.debounce)\n        .subscribe(mutations => this.event.emit(mutations));\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n      this._debouncer.next(mutations);\n    });\n\n    this._observer.observe(this._elementRef.nativeElement, {\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._debouncer.complete();\n      this._debouncer = this._observer = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nexport class Dir {\n/**\n * Layout direction of the element.\n */\n_dir: LayoutDirection = 'ltr';\n/**\n * Event emitted when the direction changes.\n */\ndirChange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: LayoutDirection) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): LayoutDirection { return this.dir; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: LayoutDirection) { this.dir = v; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_dir': [{ type: Input, args: ['dir', ] },],\n'dirChange': [{ type: Output },],\n'dir': [{ type: HostBinding, args: ['attr.dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.dirChange;\n}\n\nexport class RtlModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RtlModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRtlModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRtlModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line]',\n  host: {\n    '[class.mat-line]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [CompatibilityModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Directive,\n  Inject,\n  Optional,\n  isDevMode,\n  ElementRef,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return new Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-card-subtitle],\n  [mat-card-title],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar,\n  mat-error`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-card-subtitle],\n  [md-card-title],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar,\n  md-error`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      // Delay running the check to allow more time for the user's styles to load.\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nCompatibilityModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nCompatibilityModule.prototype._document;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","FormsModule","Output","Input","Optional","ElementRef","Renderer2","ViewEncapsulation","EventEmitter","forwardRef","NgModule","Directive","Inject","DOCUMENT","ChangeDetectorRef","ViewContainerRef","Observable","ContentChildren","ContentChild","ViewChild","FormGroupDirective","NgForm","animate","style","Component","NgControl","Self","TemplateRef","Subject","SkipSelf","Injectable","isDevMode","NgZone","Injector","ComponentFactoryResolver","InjectionToken"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AuEWO,AAIP;;;;AASA,IAAA,sBAAA,GAAA,IAAAmC,4BAAA,CAAA,kBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsEA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2DA,CAAA;;;;AAIA,mBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;;;;;;;;AAWA,IAAA,gCAAA,IAAA,YAAA;IACA,SAAA,gCAAA,GAAA;;IARA,OAAA,gCAAA,CAAA;CAUA,EAAA,CAAA,CAAA;AACA,gCAAA,CAAA,UAAA,GAAA;;;;qBAPA,CAAA;aAYA,EAAA,EAAA;CACA,CAAA;;;;;;;;;;;AA0BA,IAAA,cAAA,IAAA,YAAA;IACA,SAAA,cAAA,GAAA;KACA;IACA,OAAA,cAAA,CAAA;;AAzBO,cAAP,CAAA,UAAA,GAAA;IA2BA,EA1BE,IAAA,EAAMzB,sBA0BR,EAAA,IAAA,EAAA,CA1ByB;gBA2BzB,OAAA,EAAA,CAAA,mBAAA,CAAA;;;;;;;AAOA,cAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;AAkBA,IAAA,MAAA,IAAA,YAAA;;;;;AASA,MAAA,CAAA,UAAA,GAAA;IAxCA,EAAA,IAAA,EAAAC,uBAAA,EAAA,IAAA,EAAA,CAAA;;;;iBAHA;aA+CA,EAAA,EAAA;;;;;AAKA,MAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;AAtCA,IAAG,YAAH,IAAA,YAAA;;;;;;;;;QASA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;QA8CI,IAAI,CAAR,QAAA,GAAA,QAAA,CAAA;QACA,IAAM,CAAN,aAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CA7CY,CA6CZ;QAEA,IAAM,CAAN,MAAA,CAAA,OAAA,CAAA,SA7C6B,CAAG,YA6ChC;YA7BiD,KAftC,CAeX,aAfsB,CAAI,KAe1B,CAAA,MAfsC,CAetC,MAAA,CAAA,CAAA;SAgCA,CAAA,CAAA;KACA;;;;;IAQA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,KAAA,EAAA;QACA,IAAA,CAAA,aAAA,EAAA,CAAA;;YA5CA,IAAA,CAAA,SAAA,CAAA,MAA2C,GAA3C,KAAA,GAAA,OAAA,EAAA,IAAA,CAAA,CAAA;SA8CA;aACA,IAAA,KAAA,GAAA,CAAA,EAAc;YACd,IAAE,CAAF,SA7CW,CA6CX,gBA7Ca,EAAkB,IA6C/B,CAAA,CAAA;SACA;KACA,CAAA;;;;;;;QAxCA,IAAA,CAAA,SAAA,CAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;KAgDA,CAAC;;;;;;;QA0BD,IAAA,KAAA,EAAA;;SA9DA;aA+DA;YACA,IAAE,CAAF,SAAA,CA9Da,WA8Db,CAAA,IAAA,CAAA,QAAA,CAAA,aAAA,EAAA,SAAA,CAAA,CAAA;SACA;KACA,CAAA;IACA,OAAA,YAAA,CAAA;CACC,EAAD,CAAA,CAAA;;;;IA5DA,OAAA,YAAA,CAAA;;AD9QA,YAAA,CAAA,UAAA,GAAA;;;;;;CAMA,CAAA;;;;AAEA,YAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;AAQC,IAAD,GAAA,IAAA,YAAA;;;;;;;;;QDFA,IAAA,CAAA,SAAA,GAAA,IAAAH,0BAAA,EAAA,CAAA;KAFA;IACA,MAAA,CAAA,cAAA,CAGY,GAHZ,CAAA,SAAA,EAAA,KAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA;;;;;;;;;YAsBA,IAAA,CAAA,IAAA,GAAA,CAAA,CAAA;;;;;;QAMA,YAAA,EAd+C,IAc/C;KAdA,CAAA,CAAA;IAAA,MAAA,CAAA,cAAyD,CAAzD,GAAA,CAAA,SAAA,EAAA,OAAA,EAAA;;;;;QAqBA,GAAO,EAAP,YAAA,EAAA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA;;;;;;QAZA,UAAG,EAAH,IAAA;QAmBI,YAAJ,EAAA,IAlBU;KAmBV,CAAA,CAAA;IACA,OAAA,GAAA,CAAA;CACA,EAAA,CAAA,CAAA;AAlBA,GAAA,CAAA,UAAA,GAAW;IAmBX,EAAA,IAAA,EAAMG,uBAAN,EAAA,IAlBqB,EAkBrB,CAAA;gBACA,QAAA,EAAA,OAAA;;;;;;;;AAQA,GAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EApB2C,CAAC;AAqB5C,GAAA,CAAA,cAAA,GAAA;;;;;;IAlBG,SAAA,SAAH,GAAG;KAyBH;IACA,OAAA,SAAA,CAAA;CACA,EAAA,CAAA,CAAA;AAxBA,SAAA,CAAA,UAAA,GAAA;IAyBA,EAAA,IAAA,EAAMD,sBAAN,EAAA,IAxBY,EAwBZ,CAAA;gBACA,OAAA,EAAA,CAAA,GAAA,CAAA;gBACA,YAAA,EAAA,CAAA,GAAA,CAAA;aAEA,EAAA,EAAA;CAEA,CAAA;;;;AAWA,SAAA,CAAA,cAAA,GAAA,YAAA,EAhC2B,OAgC3B,EAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;CDvFA,EAAA,CAAA,CAAA;AAAA,yBAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;;;;IAeA,SAAA,cAAA,CAAA,wBAAA,EAAA,WAAA,EAAA;;;;;;QAMI,IAAJ,CAAA,KAAA,GAAA,IAAAF,0BAAA,EANc,CAAK;;;;QAUnB,IAAA,CAAA,UAAA,GAAA,IAAAoB,oBAAA,EAAA,CAAA;KACG;;;;;QAHA,IAQH,KAAA,GAAA,IAAA,CARwC;;;;;SAaxC;;YAXA,IAAA,CAA2C,UAA3C,CAAA,SAAA,CAAA,UAAA,SAAA,EAAA,EAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SAaA;QACA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,UAAA,SAAA,EAAA;;SAEA,CAAA,CAAA;QACA,IAAA,CAAC,SAAD,CAAA,OAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA;YACA,aAAA,EAAA,IAAA;;;;KAVA,CAAA;;;;IAmBA,cAdU,CAcV,SAAA,CAAA,WAdmC,GAcnC,YAAA;QACA,IAAA,IAAA,CAAA,SAAA,EAAA;YAGA,IAsBA,CAtBA,SAAA,CAAA,UAAA,EAAA,CAAA;;YAZA,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA;SAmCA;KACA,CAAA;IACA,OAAA,cAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,UAAA,GAAA;;;;CAhCA,CAAA;;;;;;IDlDA,EAAA,IAAA,EAAAvB,wBAAA,GAAA;;;;;CAKA,CAAA;AACA,IAAA,oBAAA,IAAA,YAAA;IACA,SAAA,oBAAA,GAAA;;IADA,OAAA,oBAAA,CAAA;CAGA,EAAA,CAAA,CAAA;AACA,oBAAA,CAAA,UAAA,GAAA;;;;gBAAA,SAAA,EAAA,CAAA,yBAAA,CAAA;aAQA,EAAA,EAAA;;;;;;;;;;AAcA,IAAA,QAAA,GAAA,EAAA,CAAA;AACA,IAAA,UAAA,GAAA,EAAA,CAAA;;;;AAIA,IAAA,SAAA,GAAA,EAdI,CAcJ;;;;AAXA,IAAA,KAAA,GAAA,EAAA,CAAA;AAOA,IAAA,GAAA,GAAA,CAAA,CAAA;;;;;;;;;AA4BA,SAAK,qBAAL,CAAA,KAAA,EAAA;IArBA,OAAA,KAAA,IAAA,IAAA,IAAA,EAAA,GAAA,KAAA,KAAA,OAAA,CAAA;CAsBA;AACA,IAAA,WAAA,GAAA,EAAA,CAAA;AAEA,WAAA,CAAQ,SAAR,GAAA,CArBqB,CAqBrB;AACA,WAAA,CAAM,OAAN,GAAA,CAAA,CAAA;AACA,WArBO,CAqBP,UAAA,GAAA,CAAA,CAAA;AAEA,WAAA,CAAQ,MAAR,GAAA,CArBU,CAAS;AAsBnB,WAAA,CAAM,WAAN,CAAA,SAAA,CAAA,GAAA,WAAA,CAAA;AACA,WAAA,CAAM,WArBW,CAqBjB,OAAA,CAAA,GAAA,SAAA,CAAA;AACA,WAAA,CAAM,WAAN,CAAA,UAAA,CAAA,GAAA,YAAA,CAAA;AACA,WArBO,CAqBP,WAAA,CAAA,MAAA,CAAA,GAAA,QAAA,CAAA;;;;;;;;;;IAUA,SAAA,SAAA,CAAA,SAAA,EAAA,OAAA,EAAA,MAAA,EAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;;QAtBA,IAAA,CAAA,MAAA,GAAA,MAA2C,CAA3C;;;;QA2BA,IAAA,CAAA,KAAA,GAAA,WAAA,CAAA,MAAA,CAAA;;;;;;IAMA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;QACA,IAAA,CAAA,SAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA;KAxBA,CAAA;IA0BA,OAAO,SAzBK,CAyBZ;CACA,EAAA,CAAA,CAAA;;;;AAnB0C,IAA1C,uBAAA,GAAA,GAAA,CAA8E;;;;AA4D9E,IAAA,wBAxDa,GAwDb,GAAA,CAAA;;;;;;;;AD5JA,IAAA,cAAA,IAAA,YAAA;;;;;;;IAQA,SAAA,cAAA,CAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA;QAEA,IAAA,CAAa,OAAb,GAAA,OAAA,CAAA;QACA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;;;;QAMA,IAAA,CAAA,YAAA,GAAA,KAAA,CAAA;;;;QAKA,IAAa,CAAb,cAAA,GAAA,IAAA,GAAA,EAAA,CAAA;;;;;;;;QDhBA,IAAA,CAAA,YAAA,GAL0B,EAK1B,CAL0B;;;;QDC1B,IAAY,CAAZ,cAAA,GAAA,KAAA,CAAA;;QAEA,IAAY,QAAZ,CAAA,SAAA,EAAA;YACY,IAAZ,CAAA,iBAAA,GAAA,UAAA,CAAA,aAAA,CAAA;;YAEY,IAAZ,CAAA,cAA+B,CAAC,GAAG,CAAnC,WAAA,EAAA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;YACY,IAAZ,CAAA,cAAA,CAAA,GAAmC,CAAnC,SAAA,EAAA,IAAmD,CAAnD,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;YACY,IAAZ,CAAA,cAA+B,CAA/B,GAAA,CAAA,YAAA,EAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;;;;KAKA;;;;;;;;IAEA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA;QACW,IAAX,KAAA,GAAA,IAAA,CAAA;;;;YACA,KAAA,GAAA,aANG,CAMH,IAAA,GAAA,aAAA,CAAA,KAAA,GAAA,CAAA,CAAA;YAUA,KAAA,GAAA,aAAA,CAAA,GAAA,GAAA,aAAA,CAAA,MAAA,GAAA,CAAA,CAAA;;;;;YAKA,qBAAA,cAAA,GAAA,IAAA,CAAA,MAAA,CAAA,yBAAA,EAAA,CAAA;YACQ,KAAR,IAAA,cAAA,CAZoB,IAYpB,CAZkC;YAalC,KAAA,IAAA,cAAA,CAAA,GAAA,CAAA;SACA;;QDjCA,qBAAA,QAAA,GAAA,uBAAA,IAAA,CAAA,IAAA,MAAA,CAAA,WAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;;QAGA,qBAAC,MAAA,GAAD,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAA;;;;QAIA,MAAA,CAAA,KAAA,CAAA,MAAA,GADC,MAAA,GACD,CAAA,GAAA,IAAA,CAAA;;;;;;;;QAgBA,yBAAA,CAAA,MAAA,CAAA,CAAA;;;;;;;;;QA0Bc,IAAd,CAAA,qBAAA,CAAA,YAAA;;;;aAjBA;;;;;;;;;;;;YAeA,OAAA;;;;QAIA,QAAA,CAAA,KAAA,CAAA,OAPG,GAOH,GAPG,CAOH;;;QAcA,IAAM,CAAN,qBAA4B,CAA5B,YAAyC;;YAGnC,QAAN,CAAA,UAAyB,CAAC,WAA1B,CAAA,QAAA,CAA+C,CAAC;SAChD,EAAA,wBAA6B,CAAC,CAA9B;KACA,CAAA;;;;;;;;;;;;;IAcA,cAAA,CAAA,SAAA,CAjBQ,iBAiBR,GAjBwB,UAiBxB,OAAA,EAjB+C;QAmB3C,IAAI,KAAR,GAAA,IAAA,CAAA;;QAEA,IAAM,IAAN,CAAW,eAAX,EAjB4B;YAkB5B,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA,IAAA,EAAA,EAAA,OAAA,KAAA,CAAA,eAAA,CAAA,mBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SAjBA;;;YAoBM,IAAN,CAAA,OAAA,CAAA,iBAAA,CAAA,YAjBgC;gBAkBhC,KAjBe,CAiBf,cAjB8B,CAiB9B,OAAA,CAAA,UAAA,EAAA,EAAA,IAAA,EAAA,EAAA,OAAA,OAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;aACA,CAAA,CAAA;SACK;QAED,IAAJ,CAAA,eAAA,GAAA,OAjBiB,CAiBjB;KACA,CAAA;;;;;;IAQA,cAAA,CAAA,SAAA,CAAA,WAjBoC,GAiBpC,UAAA,KAAA,EAAA;QACI,IAAJ,CAAA,IAAA,CAAA,cAAA,EAAA;YACA,IAAA,CAAA,YAjByB,GAAA,IAiBzB,CAAA;;SAGA;KACA,CAAA;;;;;IAQA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;;;QAKI,IAAJ,CAAA,cAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;;gBAGA,MAAA,CAAA,OAAA,EAjB4B,CAiB5B;;;KAIA,CAAA;;;;;IAMA,cAAA,CAjBO,SAiBP,CAAA,YAAA,GAAA,YAAA;QAEI,IAAJ,IAAA,CAAA,YAAA,EAAA;YACA,IAAA,CAAA,SAAA,EAAA,CAAA;;;;;;;;;IASA,cAAA,CAAa,SAAb,CAAA,qBAAA,GAAA,UAAA,EAAA,EAAA,KAAA,EAAA;QACA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAA,GAAA,CAAA,CAAA,EAAA;QAEI,IAAJ,CAAA,OAAA,CAAA,iBAAA,CAAA,YAAA,EAAA,OAAA,UAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;KAEA,CAAA;IACA,OAAA,cAAA,CAAA;CAEA,EAAA,CAAA,CAAA;;;;;AAMA,SAAK,yBAAL,CApBO,OAoBP,EAAA;;;;;;;;;;;;;;IAcA,qBAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;;IAEA,OAAA,IAAA,CAzBS,IAyBT,CAAA,KAAA,GAAA,KAzB8B,GAyB9B,KAAA,GAAA,KAAA,CAAA,CAAA;CACA;;;;;;;;;AAWA,IAAA,QAAA,IAAA,YAAA;;;;;;QAtBA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA,SAAA,IAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA;QA6BI,IAAI,CA5BC,OA4BT,GAAA,IAAA,CAAA,SAAA,IAAA,iBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA;;QAEA,IAAM,CAAN,KAAA,GAAA,IAAA,CAAA,SA5ByB,IA4BzB,CAAA,EAAA,EAAA,MAAA,GAAA,MAAA,IAAA,kBAAA,CAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA;;;;;;;QAvBA,IAAA,CAAG,GAAH,GAAA,IAAA,CAAA,SAAA,IAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;;;;QAoCA,IAAA,CAAA,OAAA,GA9Be,IA8Bf,CAAA,SAAA,IAAA,sBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA;;QAEA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,SAAA,IAAA,UAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA;KACG;;;;;CA3BH,CAAA;;;;AAoCA,QAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;QA7BA,qBAAA,kBAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA;QAqCI,mBAAJ,GAAA,IAAA,GAAA,CApCkB;;;;;;;YAuFlB,UAAA;;;;YAIA,MAAA;YACA,QAAA;;;;;;;;YAQA,QAAA;YACA,QAAA;YACA,KAAA;YACA,MAAA;YACA,MAAA;;YDhTA,MAAA;;YAEA,kBAAA,CAAA,YAAA,CAAA,MAAA,EAAA,KAA6C,CAA7C,CAAA;;;;;;AAMA,IAAA,cAAA,IAAA,YAAA;IAAA,SAAA,cAAA,GAAA;KACA;;;;IAIA,EAAA,IAAA,EAAAK,sBACG,EADH,IAAA,EAAA,CAAA;gBACA,SAAA,EACY,CAAK,QADjB,CACkB;;CAElB,CAAA;;;;;;;;;;;;;;;;;;IAmBA,SAAA,gBAAA,CAAA,OAAA,EAAA,SAAA,EAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;;;;;;;;;;;;;QDhCI,IAAJ,CAAA,cAAuB,GADG,CAC1B,CAAA;;;;;QAKA,IAAM,CAAN,oBAAA,GAAA,IAAA,GAAA,EAAA,CAAA;KACA;;;;;;;IAOA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,UAAA,EAAA;QACA,IAAM,KAAN,GAAA,IAAA,CAAA;QACA,qBAAA,kBAAA,GAAA,UAAA,CAAA,eAAA,EAAA,CAAA,SAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,OAAA,EAAA,CAAA,EAAA,CAAA,CAAA;QACA,IAAM,CAAN,oBAAA,CAAA,GAAA,CAAA,UAAA,EAAA,kBAAA,CAAA,CAAA;KACA,CAAA;;;;;;IAMA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,UAAA,EAAA;QACA,IAAM,IAAN,CAAA,oBAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;YACM,IAAN,CAAW,oBAAX,CAAA,GAAA,CAAA,UAAA,CAAA,CAAA,WAAA,EAAA,CAAA;YACM,IAAN,CAAA,oBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,CAAA;SACK;KACL,CAAA;;;;;;;;;ID9BA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,aAAA,EAAA,QAAA,EAAA;QAFA,IAGQ,KAHR,GAGQ,IAHR,CAAA;QACA,IAAA,aAAW,KAAX,KAAA,CAGe,EAHf,EAAA,aAAA,GAAA,mBAAA,CAAA,EAAA;;QAEA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA;;;;;;YDGA,IAAA,CAAA,SAAA,CAAA,YAAA,EAAA,CAAA,SAAA,CAAA,aAAA,CAAA;;;QAGA,IAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;;;;;;;;;;YAUA,IAFsB,KAEtB,CAAA,mBAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,CAAA,IAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA;gBAFA,KAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,CAAA;gBAAA,KAAA,CAA+C,mBAA/C,GAAA,IAAA,CAAA;;;;KAOA,CAAA;;;;;;;;QAEG,qBAAH,mBAAA,GAAA,EAAA,CAAA;;;;;SAWA,CAAA,CAAA;QApBA,OAAA,mBAAA,CAAA;;;;;;;;IA4BA,gBAAA,CAAA,SAAA,CALU,yBAKV,GAAA,UAAA,UAAA,EAL4D,UAAU,EAKtE;QAEI,qBAAJ,OAAA,GAAA,UAAA,CAL8C,aAK9C,CAAA;QACA,qBAAA,iBAAA,GAAA,UAAA,CAAA,aAAA,EAAA,CAAA,aAAA,CAAA;;;;;;aAMA;SACA,QALa,OAKb,GAAA,OAAA,CAAA,aAAA,EAAA;KACA,CAAA;;;;;;;;;;;;CAYA,CAAA;;;;AAIA,gBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;;;CAIA,CAAA,EAAA,CAAA;;;;;;;AAYA,SAAA,kCAAA,CAAA,gBAAA,EAAA,MAAA,EAAA,QAAA,EAAA;IACA,OAAA,gBAAA,IAAA,IAAA,gBAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA;;;;IAMA,OAAA,EAAA,gBAAA;IACA,IAAA,EAAA,CAAA,CAAM,IAAIN,sBAAV,EAAA,EAAA,IAAAyB,sBAAA,EAAA,EAAA,gBAAA,CAAA,EAAAG,oBAAA,EAAA,QAAA,CAAA;IAEA,UAAA,EAAU,kCAPkC;CAQ5C,CAAA;;;;;AAMA,IAAA,aAAA,IAAA,YAAA;;;;;;;QAOI,gBAAJ,CAAA,QAAA,CAAA,IAAA,EAAA,YAAA,EAAA,OAAA,KAAA,CAAA,sBAAA,EAAA,CAAA,EAAA,CAAA,CAAA;KAEA;;;;;;IAOA,aAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAA,YAAA,EAAA;;;;;;;;;;;;;;;;QAeA,qBAAA,cAAA,GAAA,IAd6C,CAc7C,yBAAA,CAAA,YAAA,CAAA,CAAA;QAPA,qBAAA,MAAA,GAAA,MAAA,CAAA,WAAA,CAAA;;;;;YAaA,MAAA,EAAA,cAAA,CAAA,GAAA,GAAA,MAAA;YACQ,KAAR,EAAA,cAAA,CAAA,IAAA,GAAA,KAAA;YACA,MAAA,EAAA,MAAA;;SAfA,CAAA;KAiBA,CAhBE;;;;;;IAsBF,aAAA,CAAa,SAAb,CAAA,yBAAA,GAAA,UAAA,YAAA,EAAA;QACA,IAAO,YAAP,KAAA,KAAA,CAAA,EAAA,EAAA,YAAA,GAAA,IAAA,CAAA,aAAA,CAAA,EAAA;;QAIA,IAAA,CAAA,YAAA,EAAA;;;;;;;;;;;YAgDA,QAAA,CAAA,eAAA,CAAA,SAAA,IAAA,CAAA,CAAA;QACM,qBAAN,IAAA,GAAA,CAAA,YAAA,CAAA,IAAA,IAAA,QAAA,CAAA,IAnEqE,CAmErE,UAAA,IAAA,MAAA,CAAA,OAAA;YACA,QAAA,CAAA,eAAA,CAAA,UAAA,IAAA,CAAA,CAAA;QACA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA;;;;;;ID7MA,aAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,YAAA;;;;CAQA,EAAA,CAAA,CAAA;;IAEA,EAAA,IAAA,EAAAF,wBAAA,EAAoB;CACpB,CAAA;;;;;;CAMA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;AAoBA,IAAA,wBAAA,GAAA,IAAAK,4BAAA,CAAA,0BAAA,CAAA,CAAA;AACA,IAAA,QAAM,IAAN,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCA,QAAA,CAAA,SAFiB,CAEjB,WAAA,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,OAAA,CAAA,SAAA,CAAA,IAAA,IAAA,CAAA,OAAA,EAAA;;;;;;;;;;QAUA,IAJQ,CAIR,eAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;;;;;;;;;QAoCA,IAAA,CAjCW,eAiCX,CAAA,UAAA,EAAA,CAAA;KACA,CAAA;IACE,MAAF,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,cAAA,EAAA;;;;;;YDtGA,OAAA;gBAEA,QAAA,EAAA,IAAA,CAAA,QAAA;;;;;;;;KAsDA,CAAA,CAAA;;;;;;QA9BA,IAAA,CAAA,eAAA,CAAA,cAAA,GAAA,IAAA,CAAA,cAAA,CAAA,QAAA,IAAA,IAAA,CAAA,QAAA,CAAA;;;;;;IAMA,EAAA,IAAA,EAAAxB,uBAAA,EAAA,IAKI,EAAA,CALJ;gBA+BA,QAAA,EAAA,oDAAA;gBACA,QAAA,EAAA,UAAA;gBAEA,IAAA,EAAA;oBACA,OAAA,EAAA,YAAA;;;;;;;;AAQA,QAAA,CAAK,cAAL,GAAA,YAAA,EAAA,OAAA;IAEA,EAAA,IAAA,EAAQN,wBAAR,GAAA;IACA,EAAA,IAAA,EAAA2B,oBAAA,GAAA;;;;CAIA,CAAA,EAAA,CAAA;;IAEA,SAVS,EAUT,CAAA,EAAA,IAAA,EAAA7B,mBAVyB,EAUzB,IAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA;IACA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,IAAA,EAAA,CAAA,kBAAA,EAAA,EAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;QAGG,IAmBH,CAAA,OAnBG,GAmBH,OAAA,CAAA;QACI,IAAJ,CAAA,SAAA,GAAA,SAAA,CAAA;QACA,IAAM,CAAN,gBAAA,GAAA,IAAAyB,oBAAA,EAAA,CAAA;KACA;;;;IAIA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;;;;aAhBA,CAAA,CAAA;SAsBA,CAAA,CAAA;QACI,IAAI,CArBC,OAqBT,CAAA,QArByB,CAqBzB,IAAA,CAAA,CAAA;KACG,CAAH;;;;IAGA,UAAA,CAAA,SAAU,CAAV,WAAA,GAAA,YAAA;QACA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,IArBY,CAqBZ,CAAA;QACA,IAAA,IAAE,CAAF,eAAA,EAAA;YACA,IAAA,CAAA,eAAA,EAAA,CAAA;YAnBA,IAAA,CAAA,eAAA,GAAA,IAAA,CAAA;SAqBA;KACA,CAAA;;;;;IAlBA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;QAwBA,OAAA,IAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,CAAA;KACA,CAAC;;;;IAID,UAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;QAtBA,OAAA,IAAA,CAAA,WAAA,CAAA;KAwBA,CAAA;IACA,OAAA,UAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,UAAA,CAAA,UAvBa,GAuBb;IACA,EAAA,IAAA,EAAAjB,uBAAA,EAAA,IAAA,EAAA,CAAA;gBAtBY,QAuBZ,EAAA,mCAAA;aACA,EAAW,EAvBE;CAwBZ,CAvBC;;;;;;;ID9IF,EAAA,IAAA,EAAAqB,oBAAA,GAAA;;;;;;;;;;;IAUA,SAAA,wBAAA,CAAA,iBAAA,EAAA,eAAA,EAAA;QANU,IAAV,eAAA,KAA6C,KAA7C,CAAA,EAAA,EAAA,eAAA,GAAA,CAAA,CAAA,EAAA;QAMA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;;;;;IAUA,wBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,UAAA,EAAA;QACA,IAAA,CAAA,WAAA,GAAA,UAAA,CAAA;KAEA,CAAA;;;;;QAKA,IAAA,KAAA,GAAA,IAAA,CAAA;QACI,IAAI,CANC,IAMT,CAAA,mBANiC,EAMjC;YAEQ,IANC,CAAI,mBAMb,GAAA,IAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,eAAA,EAAA,YAAA;gBACU,KAAV,CAAA,WAAA,CAN2B,cAM3B,EAAA,CAAA;aACA,CAAA,CAAA;SACK;KACF,CAAH;;;;;QAKA,IAAA,IAAA,CAAA,mBAAA,EAAA;YACA,IAAA,CAAA,mBANiB,CAAgB,WAMjC,EAAA,CAN8C;YAO9C,IAAA,CAAA,mBAAA,GAAA,IAAA,CAAA;;;;CAIA,EAAA,CAAA,CAAA;;;;AALO,IAAP,mBAAA,IAAA,YAAA;;;;IAYA,SAAA,mBAAA,CAAA,iBAAA,EAAA;;;;;;;;IAQA,mBAAA,CAAmB,SAAnB,CAAA,MAAA,GAAA,UAAA,UAAA,EAAA;QACA,IAAA,CAAA,WAAA,GAAA,UAAA,CAAA;;;;;IDjEA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;;;;;oBAOA,KAAA,CAAA,WAAA,CAAA,MAAA,EAAA,CAAA;iBADA;gBAAA,KAAA,CAAA,OAAA,EAAmE,CAAnE;aAHA,CAAA,CAAA;SAGA;;;;;IAOA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;QACI,IAAI,IAAR,CAAA,mBAAA,EALkC;YAMlC,IAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,CAAA;;;;IAIA,OAAA,mBAAA,CAAA;CACA,EAAA,CAAA,CAAA;;;;AAIA,IAAA,kBAAA,IAAA,YAAA;IACA,SAAA,kBAAA,GAAA;;;;;IAKA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA,GAAA,CAAA;;;;IAIA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA,GAAA,CAAA;;;;;;CDlCA,EAAA,CAAA,CAAA;;;;AAMA,IAAA,mBAAA,IAAA,YAAA;;;;;;;;KAKA;;;;;;;;IAQA,mBAAA,CAAA,SAAA,CAAA,MAAA,GALiC,YAKjC;QACA,IAAA,IAAQ,CAAR,aAAA,EAAA,EAAA;YACA,qBAAA,IAL2B,GAK3B,QAAA,CAAA,eAAA,CAAA;YACA,IAAA,CAAS,uBAAT,GAAA,IAAA,CAAA,cAAA,CAAA,yBAAA,EAAA,CAAA;;YAGA,IAAA,CAAA,mBAAA,CAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;YACA,IAAA,CAAA,mBAAA,CAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;;;;YAKA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA,wBAAA,CAAA,CAAA;YACQ,IAPC,CAAI,UAOb,GAAA,IAAA,CAAA;SACA;KACA,CAAA;;;;;QDxCA,IAAA,IAAA,CAAA,UAAA,EAAA;;;YAGA,QAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,GAAA,CAAA;;;;KAIA,CAAA;;;;IAIA,mBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;;;;QAIA,IAAA,QAAA,CAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,wBAAA,CAAA,IAAA,IAAA,CAAA,UAAA,EAAA;YACA,OAAA,KAAA,CAAA;;QDfA,qBAAA,IAAA,GAAA,QAAA,CAAA,IAAA,CAAA;;;KAGA,CAAA;;;;IAOA,SAAA,oBAAA,GAAA;KADA;IAJA,OAAA,oBAAA,CAAU;CAEV,EAAA,CAAA,CAAA;AAEA,oBAAA,CAAA,UAAA,GAAA;;;;gBAEW,YAGX,EAAA,CAAA,UAAA,CAAA;;;;;;;AAQA,oBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAL2C,EAK3C,CAAA;;IAGA,SAAA,cAAA,GAAA;KACA;;;AAIA,cAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAMtB,sBAAN,EALY,IAAM,EAKlB,CALuB;gBAMb,OAAV,EAAA,CALY,cAKZ,EAAA,cALkD,EAKlD,oBAAA,CAAA;gBACU,OAAV,EAAA,CAAA,QALwB,EAKxB,cAAA,CAAA;gBACA,YAAA,EAAA,CAAA,QAAA,CAAA;gBACA,SAAA,EAAA,CAAA,uBAAA,CAAA;;;;;;AAMA,cAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;IAkBA,SAAA,gBAAA,CAAA,WAAA,EAAA,SAT+B,EAS/B;QACI,IAAJ,CAAA,WAAA,GAAA,WAAA,CATU;QAUN,IAAJ,CAAA,SAAA,GAAA,SAAA,CAT+B;;;;QDxC/B,IAAA,CAAA,KAAA,GAAA,WAAA,CAAA;;;;QAEA,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,KAAA,GAAA,QAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAW,CAAX,gBAAA,CAAA,SAAA,EAEe,OAFf,EAAA;;;;;;;;;;QDPA,GAAA,EAAA,UAAA,KAAwE,EAAxE;YACQ,IAFR,KAAA,EAAA;gBACE,qBAAF,aAAA,GAAA,IAAA,CAE4C,WAF5C,CAAA,aAAA,CAAA;gBACE,IAAF,CAAA,SAAA,CAAA,WAAA,CAAA,aAAA,EAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA;gBACE,IAAF,CAAA,SAEgB,CAAA,QAAE,CAAQ,aAF1B,EAAA,MAAA,GAAA,KAAA,CAAA,CAAA;gBACE,IAAF,CAAA,MAEa,GAFb,KAAA,CAAA;aACC;SACD;;;;IAIA,OAAA,gBAAA,CAAA;;ADZA,gBAAA,CAAA,UAAA,GAAA;;;;;;;;;;;aAWA,EAAA,EAAA;;;;;AAgCA,gBARsB,CAQtB,cAAA,GAAA,YAAA,EAAA,OAAA;IARA,EAAA,IAAA,EAAAL,wBAAA,GAAA;IAAA,EAAA,IAAA,EAAAC,uBAAA,GAAA;;;;IApBA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAH,mBAAA,EAAI,EAAJ;;;;IAIA,SAAA,iBADI,GACJ;KA0BA;IACA,OAAA,iBAAA,CAAA;;;;;gBAtBA,YAAA,EAFoC,CAEpC,gBAAA,CAAA;;;;;;AAMA,iBANS,CAMT,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;AAMA,IAAA,gBAAA,GAAA,CAAA,CAAA;;;;AAYA,IAAA,uBATmB,IASnB,YAAA;;;;;IAKA,SAAA,uBAAA,CAAA,MAAA,EAAA,WAAA,EAAA;QACA,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA,EAAA,WAAA,GAAA,KAAA,CAAA,EAAA;QACA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;QACA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;KACA;IACA,OAAA,uBAAA,CAAA;CACA,EAAA,CAAA,CAAA;;;;;;;;;IASA,SAAA,QAAA,CAAA,QAAA,EAAA,oBAAA,EAAA;QAVA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;QAYA,IAAA,CAXS,oBAWT,GAAA,oBAAA,CAAA;QACA,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA;;;;;QD7EA,IAGQ,CAHR,SAGkB,GAHlB,KAAA,CAAA;QACA,IAAA,CAAA,GAAE,GAAF,YAAA,GAAA,gBAAA,EAAA,CAAA;;;;;;;;;KDaA;;;;;;;;QAQA,YAAA,EAAA,IAAA;;;;;;;QAC8C,GAA9C,EAAA,YAAA,EAA8C,OAA9C,IAA8C,CAAc,SAA5D,CAAA,EAAA;QAAA,UAAA,EAAA,IAAA;QAMA,YAAA,EAAA,IAAA;KAEA,CAAA,CAAA;;;;;;;;;;;QACU,GAAV,EAAA,UAAA,KAAA,EAA+B,EAA/B,IAAA,CAAA,SAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA,EAAA;QACU,UAAV,EAAU,IAAV;;;;;;;;;;;;;SA+CA;QAlBA,UAAA,EAAA,IAAA;;;;;;;;;;;;;;;KASA,CAAA,CAAA;;;;;IAKA,QAAA,CAAA,SArBG,CAqBH,MAAA,GAAA,YAAA;;;;;;;;IAmBA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;QACI,IAAJ,CAAA,SAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,yBAAA,EAAA,CAAA;;;;;;IAMA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;;KAEA,CAAA;;;;;;;IAOA,QAAQ,CA3BC,SAAC,CA2BV,eAAA,GAAA,YAAA;QACI,IAAI,CA3BC,OA2BT,GAAA,IAAA,CAAA;KACG,CAAH;;;;;;;IAOA,QAAQ,CA7BC,SA6BT,CAAA,iBA7BmC,GA6BnC,YAAA;QACA,IAAA,CAAA,OAAA,GAAA,KAAA,CAAA;;;;;;;IAOA,QAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,KAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BA,QAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;QACA,OAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA;;;;;;;IAOA,QAAQ,CAlCC,SAkCT,CAAA,yBAAA,GAAA,UAAA,WAAA,EAAA;QACA,IAAM,WAAN,KAAA,KAlCuB,CAAK,EAkC5B,EAAA,WAAA,GAAA,KAAA,CAAA,EAlC8C;QAmC9C,IAAM,CAAN,iBAAA,CAAA,IAAA,CAAA,IAAA,uBAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA,CAAA;KACA,CAAA;IACA,OAAA,QAAA,CAAA;;;;;oBAKA,MAAA,EAAA,QAAA;oBAnCgB,iBAoChB,EAAA,gBAAA;oBACA,sBAAA,EAAA,UAAA;;;;;oBAKA,sBAAA,EAAA,qBAAA;oBArCgB,6BAsChB,EAAA,UAAA;oBACA,SAAA,EAAA,yBAAA;;;;;;aAnCA,EAAA,EAAA;CA0CA,CAAA;;;;AAIA,QAAA,CAAA,cAzCmB,GAyCnB,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAAE,wBAAA,GAAA;IACA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,sBAAA,EAAA,EAAA,EAAA,IAAA,EAAAQ,oBAAA,EAAA,IAAA,EAAA,CAAA,2BAAA,EAAA,EAAA,EAAA,EAAA;CAlBA,CAAA,EAAA,CAAA;AAoBA,QAAA,CAAA,cAAA,GAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAI,EAAJT,mBAAA,EAAA,EAAA;IACA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IACA,mBAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,oBAAA,EAAA,EAAA;CACA,CAAA;AACA,IAAA,cAAA,IAAA,YAAA;IACA,SAAA,cAAA,GAAA;KACA;IACA,OAAA,cAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAQ,sBAAA,EAAA,IAAA,EAAA,CAAA;gBACA,OAAA,EAAA,CAAA,cAAA,EAAAV,4BAAA,EAAA,iBAAA,CAAA;gBACA,OAAA,EAAA,CAAA,QAAA,CAAA;gBACA,YAAA,EAAA,CAAA,QAAA,CAAA;;;;;;AArCA,cAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;AAiDA,SAAA,oBAAA,GAAA;IACA,MAAA,IAAA,KAAA,CA2CA,iCA3CA,CAAA,CAAA;CA4CC;;;;;;AAKD,SAAA,+BAAA,GAAA;IACA,MAAA,IAAA,KAAA,CAAA,oCAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QDtOA,IAAA,IAAA,CAAA,WAAA,EAAA,EAAA;YACA,+BAAA,EAAA,CAAA;SACA;;QDjCA,QAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA;;;;;;;;;;;QAYA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA;QACI,OAAJ,IAAA,CADgB,MAAM,EACtB,CAAA;KACA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,MAAA,CAAA,SAAA,EAAA,YAAA,EAAA;;;;;QAOI,GAAJ,EAAA,YAAA;YACA,OAAA,IAAA,CAAA,aAAA,IAAA,IAAA,CAAA;;;;;;;;;;;IAYA,MAAA,CAAA,SAHgB,CAGhB,eAAA,GAAA,UAAA,IAAA,EAAA;QACA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA;;;;;;;AAOA,IAAA,eAAA,IAAA,UAAA,MAAA,EAAA;;;;;;;IAOA,SAAA,eAAA,CAAA,SAAA,EAAA,gBAAA,EAAA,QAAA,EAAA;QACI,IAAI,gBAAR,KANyB,KAMzB,CAAA,EAAA,EAAA,gBAAA,GAAA,IAAA,CAAA,EAAA;QACA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAA,GAAA,IAAA,CAAA,EAAA;QACA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA;QAEA,KAAA,CAAA,SAAA,GAAA,SAAA,CAAA;;;QAQA,OAAA,KAAA,CAVC;;;;;;;AAkCD,IAAA,cAAA,IAAA,UAAA,MAAA,EAAA;IACA,SAAS,CAAT,cAAA,EAAA,MAAA,CAAA,CAAA;;;;;IAMA,SAAA,cAAA,CAAA,QAAA,EAAA,gBAAA,EAAA;;;;;;;;QA2CA,KAAA,CAAA,MAAA,GAAA,IAAA,GAAA,EAAA,CAAA;QACI,KAAK,CAAT,WAAA,GAAA,QAAA,CAAA;;;;;;;;QACI,GAAJ,EAAS,YAAT;YACQ,OAAR,IAAA,CAAA,WAAA,CAAA,UAAA,CAAA;SACA;;;;;;;;;;;;KAYA,CAAA;;;;;;;KAOA,CAAA;IACA,OAAA,cAAA,CAhDsB;CAiDtB,CAAA,MAAI,CAAJ,CAAA,CAAA;;;;;;;;;;;;;;;;;;;KA6DA,CAAA;;;;;;;YAOA,oBAAA,EAAA,CAAA;SACA;QACA,IAAM,IAAN,CAAA,WAAA,EAAA,EAA0B;YAC1B,+BAAA,EAAA,CAAA;SAEA;QACA,IAAM,IAAN,CAAA,WAAA,EAAA;YACA,mCAAA,EAAA,CAAA;SAEA;QACA,IAAM,MAAN,YAAA,eAAA,EAAyC;YACzC,IAAA,CAAA,eAAA,GAAA,MAAA,CAAA;YAEQ,OAAR,IAAA,CAAA,qBA9E0B,CA8E1B,MAAA,CAAA,CAAA;SACA;aACA,IAAA,MA9Ea,YA8Eb,cAAA,EAAA;YACA,IAAA,CAAA,eAAA,GAAA,MAAA,CAAA;YA9EA,OAAA,IAAgB,CAAhB,oBAAA,CAAA,MAAiD,CAAjD,CAAA;SA+EA;QACA,2BAAA,EAAA,CAAA;KACA,CAAA;;;;;;;;;;;;;;;;;;;YAoBA,IAAA,CAAA,eAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA;YACQ,IAzFC,CAAI,eAAC,GAyFd,IAAA,CAAA;SACA;QACA,IAAM,CAAN,gBAAA,EAAA,CAzFY;KA0FZ,CAAA;;;;;;YAOA,IAAA,CAAA,MAAA,EAAA,CAAA;SACA;QACA,IAAM,CAAN,gBAAA,EAAA,CAAA;QACA,IAAA,CAAA,WAAA,GAAA,IAAA,CAAA;KAEA,CAAA;;;;;;;KAOA,CAAA;;;;;;YA1FA,IAAA,CAAA,UAAA,EAAA,CAAA;YAiGQ,IAhGC,CAAI,UAAC,GAgGd,IAAA,CAAA;SACA;KACA,CAAA;IACA,OAAA,cAAA,CAAA;CACA,EAAA,CAAA,CAAG;;;;;;;;;;;;;;;;;QDtSH,OAAA,MAAA,CAAA,IAAA,CAD2C,IAC3C,EAAA,WAAA,EAAA,gBAAA,CAAA,IAAA,IAAA,CAAA;KACA;IACA,OAAA,uBAAA,CAAA;;AAAO,uBAAP,CAAA,UAAO,GAAoC;IAE3C,EADE,IAAA,EAAMW,uBAAA,EAAW,IAAA,EAAM,CAAA;gBAEvB,QAAQ,EADE,qCAAA;gBAEV,QAAQ,EADE,WAAA;aAEX,EADC,EAAG;CAEJ,CADC;;;;AAED,uBAAD,CAAA,cAAC,GAAA,YAAD,EAAA,OAAA;IAIA,EAAC,IAAI,EAAEgB,yBAAW,GAAG;IACrB,EAAC,IAAI,EAAEZ,8BAAgB,GAAG;CACzB,CAAC,EAAF,CAAA;;;;;;;;AAoBA,IAAA,mBAAA,IAAA,UAAA,MAAA,EAAA;;;;;;IAYA,SAAS,mBAAT,CAAA,yBAAA,EAAA,iBAAA,EAAA;QAlBc,IAAd,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAc,IAAd,CAAA;QACc,KAAd,CAAA,yBAAA,GAAA,yBAAA,CAAA;QAkBA,KAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;;;;;;;;;;;;QARG,YAuBH,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,QAAA,EAAA;;;;;QArBG,GA0BH,EAAA,YAAA;YACQ,OAAR,IAAA,CAAA,OAAA,CA1B4B;SA2B5B;;;;;QAOI,GAAJ,EA1BS,UAAU,MAAA,EA0BnB;YACA,IAAA,IAAA,CAAA,WAAA,EAAA,EAAA;;;;gBAIA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;aACS;YACD,IAAR,CAAA,OAAA,GA5BmB,MA4BnB,CAAA;SACA;;;;;;;;QAQA,MAAA,CAAA,SAAA,CA7BG,OAAA,CA6BH,IAAA,CAAA,IAAA,CAAA,CAAA;QACI,IAAJ,CAAA,OAAA,GAAA,IAAA,CAAA;;;;;;;;;IAeA,mBA7BmB,CA6BnB,SAAA,CAAA,qBAAA,GAAA,UAAA,MAAA,EAAA;QAEI,MAAJ,CA7BW,eA6BX,CAAA,IAAA,CAAA,CAAA;;;;;;;QAOA,qBAAA,GAAA,GAAA,gBAAA,CAAA,eAAA,CAAA,gBAAA,EAAA,gBAAA,CAAA,MAAA,EAAA,MAAA,CAAA,QAAA,IAAA,gBAAA,CAAA,cAAA,CAAA,CAAA;QACI,MAAM,CA7BC,SA6BX,CAAA,YA7BiC,CA6BjC,IAAA,CAAA,IAAA,EAAA,YAAA,EAAA,OAAA,GAAA,CAAA,OAAA,EAAA,CAAA,EAAA,CAAA,CAAA;QAEI,IAAI,CA7BC,OA6BT,GAAA,MAAA,CA7BU;QA8BN,OAAJ,GAAA,CAAA;KAEA,CAAA;;;;;;IAMA,mBA7BmB,CA6BnB,SAAA,CAAA,oBAAA,GAAA,UAAA,MAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAU,CAAV;QACA,MAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA;QACA,IAAA,CAAC,iBAAD,CAAA,kBAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA;QACA,MAAA,CAAA,SAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAA,YAAA,EAAA,OAAA,KAAA,CAAA,iBAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;;;KA3BA,CAAA;IAgCA,OAAA,mBAAA,CAAA;CACA,CAAA,cAAA,CAAA,CAAA,CAAA;AACA,mBAAA,CAAA,UAAA,GAAA;IA9BA,EAAA,IAAA,EAAAJ,uBAAA,EAAA,IAAA,EAAA,CAAA;gBAgCA,QAAA,EA/BqB,+BA+BrB;gBACA,MAAA,EAAA,CAAA,uBAAA,CAAA;aAGA,EAAA,EAAA;;;;;AAwBA,mBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAAuB,sCAAA,GAAA;IACA,EAAA,IAAA,EAAAnB,8BAAA,GAAA;;;;CAhDA,CAAA;;IDpJA,SAAA,YAAA,GAAA;;;;AAIA,YAAA,CAAA,UAAA,GAAA;IAAA,EAAA,IAAA,EAAAL,sBAAA,EAAA,IAAA,EAAA,CAAA;;;;CAQA,CAAA;;;;AAIA,YAAA,CAAA,cAFG,GAEH,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;QA8BA,IAAA,CAAA,WAAA,GAAA,KAAA,CAAA;;;;;;;;QDpCA,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA;;;;;;;CAOA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;IAeA,SAAA,aAAA,CAAA,eALsC,EAKtC,yBAAA,EAAA,OAAA,EAAA,gBAAA,EAAA;;;;;QAMI,KAAJ,CAAA,gBAAA,GAAA,gBAAA,CAAA;QACA,OAAA,KAAA,CAAA;KAKA;;;;;;;IAMA,aAAA,CAAA,SAAA,CAAoB,qBAApB,GAAA,UAAA,MAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QACA,qBAAA,gBAAA,GAAA,IAAA,CAAA,yBAAA,CAAA,uBAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA;;;;;;;;;;;YAYA,YALG,GAKH,gBAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,IAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;YACA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CAAA;YACA,IAAA,CAAA,YALQ,CAKR,YAAA;gBAJY,KAKZ,CAAA,OALa,CAKb,UAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CAAA;;;;;;QAQA,IAAM,CAAN,eAAA,CAAA,WAAA,CALkB,IAKlB,CAAA,qBAAA,CAAA,YAAA,CAAA,CAAA,CAAA;QACA,OAAA,YALoB,CAAE;KAMtB,CAAA;;;;;;;;;;QAWA,OAAA,CAAA,aAAA,EAAA,CAAA;;;;QAIA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA,EAAA,OAAA,KAAA,CAAA,eAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA;QACA,IAAA,CAAA,YAAA,EAAA,YAAA;;;;;;;QAOI,OAAJ,IAAA,GAAA,EAAA,CAAA;KACG,CAAH;;;;;;;QD/FA,IAAA,IAAA,CAAA,eAAA,CAAA,UAAA,IAAA,IAAA,EAAA;;;;;;;;;IAUA,aAAA,CAAc,SAAO,CAArB,qBAAA,GAAA,UAAA,YAAA,EAAA;QACc,QAAd,EAAA,YAAA,CAAA,QAAA,GAAA,SAAA,CAAA,CAAA,CAAA,EAAA;KACA,CAAA;IATA,OAAA,aAAA,CAAA;CACA,CAAA,cAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;QA2BA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA;QACI,IAAJ,CAAA,cAAA,GAAA,IAAAkB,oBAJQ,EAIR,CAJuB;;QAOnB,IAAI,CAJC,YAIT,GAAA,IAAAA,oBAAA,EAAA,CAAA;QACI,IAAI,CAJC,MAIT,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,UAAA,CAAA,SAAA,EAAA,gBAAA,EAAA;;;;;QAOI,GAAJ,EAAA,YAAA;YACM,OAAN,IAAA,CAAA,KAAA,CAAA;SACK;QAED,UAAJ,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;;;;QAWI,IAAI,CAHC,oBAAC,EAGV,CAAA;QACI,IAAI,CAHC,UAGT,EAAA,CAAA;QACI,IAAI,CAHC,eAGT,EAHuB,CAGvB;QAEI,IAAJ,CAAA,cAAA,EAAA,CAAA;QACA,IAAA,CAAA,YAAA,CAAA,IAAA,EAAA,CAAA;;;;;YAKA,IAAA,CAAA,eAAA,EAAA,CAAA;SACA;QACA,OAAA,YAAA,CAAA;KACA,CAAA;;;;;IAMA,UAAA,CAAA,SAAA,CAHU,MAGV,GAHuB,YAGvB;QACI,IAAI,CAHC,cAGT,EAAA,CAAA;;;;;;QAMA,IAAA,CAAA,YAAA,CAAA,IAAA,EAAA,CAAA;QACI,OAHO,IAAA,CAAK,WAAC,CAAW,MAG5B,EAAA,CAAA;KACG,CAAH;;;;;IAKA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;QACI,IAAJ,IAAA,CAAA,MAAA,CAAA,gBAAA,EAAA;YACA,IAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,CAAA;;;;;QAKA,IAAA,CAAA,YAAA,CAAA,IAAA,EAAA,CAAA;QACI,IAAJ,CAAA,YAAA,CAAA,QAAA,EAAA,CAAA;QACA,IAAA,CAAA,YAAA,CAAA,QAAA,EAAA,CAAA;;;;;;IAMA,UAAA,CAPW,SAOX,CAAA,WAAA,GAAA,YAAA;QACA,OAAA,IAAA,CAAA,WAAA,CAAA,WAAA,EAAA,CAAA;;;;;;IAMA,UAAA,CAPW,SAOX,CAAA,aAAA,GAAA,YAAA;QACA,OAAA,IAAA,CAAA,cAAA,CAAA,YAAA,EAAA,CAAA;;;;;;IAMA,UAAA,CAAA,SAToB,CASpB,WAAA,GAAA,YAAA;QACA,OAAA,IAAA,CAAA,YAAA,CAAA,YAAA,EATyC,CASzC;KACA,CAAA;;;;;;QALA,OAAA,IAAG,CAAH,YAAA,CAAA,YAAA,EAAA,CAAA;KAYA,CAAA;;;;;;QAMA,OAAA,IAAA,CAAA,MAAA,CAAA;KACA,CAAA;;;;;IAMA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;QAEI,IAAI,IAbC,CAAI,MAAC,CAAM,gBAAY,EAahC;YACM,IAAI,CAbC,MAAM,CAajB,gBAbkC,CAalC,KAAA,CAAA,IAAA,CAAA,KAAA,CAbiD,CAAI;SAchD;KAEL,CAAA;;;;;;;;;;;;;;;;QAFA,IAAA,IAAA,CAAA,MAAA,CAAA,MAAA,IAAA,IAAA,CAAA,MAAA,CAAA,MAAA,KAAA,CAAA,EAAA;YAmBQ,IAAR,CAAA,KAAA,CAAA,KAAA,CAlBU,MAkBV,GAAA,aAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;SACA;QACI,IAAI,IAAR,CAAA,MAAA,CAAA,QAAA,IAAA,IAlBoC,CAkBpC,MAAA,CAlByC,QAAW,KAkBpD,CAAA,EAAA;;;QAII,IAAI,IAAR,CAAA,MAAA,CAAA,SAlB6B,IAkB7B,IAAA,CAAA,MAAA,CAAA,SAAA,KAAA,CAAA,EAAA;;;KAIA,CAAA;;;;;;IAOA,UAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAA,aAAA,EAAA;QACA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,aAAA,GAAA,aAAA,GAAA,MAAA,GAAA,MAAA,CAAA;;;;;;;;;QATA,IAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,sBAAA,CAAA,CAAA;QAmBI,IAAI,CAAR,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA;;;QAGA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,YAAA,CAAA,IAAA,CAAA,gBAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;;;;QAKA,qBAAA,CAAA,YAAA;YACA,IAAA,KAAA,CAAA,gBAAA,EAAA;gBAEA,KAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,8BAAA,CAAA,CAAA;aACA;;KAEA,CAAA;;;;;;;;;IAUA,UApBQ,CAoBR,SAAA,CAAA,oBAAA,GAAA,YAAA;QAEA,IAAM,IAAN,CAAA,KAAA,CAAA,WAAA,EAAA;YACM,IAAN,CAAA,KAAA,CAAA,UAAA,CAAA,WApBkC,CAAM,IAAC,CAAI,KAoB7C,CApB8C,CAAM;SAqBpD;;;;;;;QASA,IAAM,KApBK,GAoBX,IApBY,CAAO;QAqBnB,qBAAA,gBApBqC,GAoBrC,IAAA,CAAA,gBAAA,CAAA;QACA,IAAA,gBAAA,EAAA;YACA,qBAAA,cAAA,GAAA,YAAA;;gBAEA,IAAA,gBAAA,IAAA,gBAAA,CAAA,UAAA,EAAA;oBAEA,gBAAA,CAAA,UAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,CAAA;;;;;gBAwBA,IAAA,KAAA,CAAA,gBAAA,IAAA,gBA3CoE,EA2CpE;oBACA,KAAA,CAAA,gBAAA,GAAA,IAAA,CAAA;;aDnRA,CAAA;YAEA,gBAAA,CAAA,SAAA,CAAA,MAAA,CAAA,8BAAA,CAAA,CAAA;;;;;;;;;YA+BQ,IAAR,CAAA,OAAA,CAAA,iBAAA,CAAA,YAAA;gBACA,UAAA,CAAA,cAAA,EAAA,GAAA,CAAA,CAAA;aACS,CAAT,CAAA;SACA;KACG,CAAH;IACA,OAAA,UAAA,CAAA;CAEA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;IAkCA,OAAA,sBAAA,CAAA;CAKC,EAAD,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IDTA,SAAA,8BAAA,CAAA,cAAA,EAAA,wBAAA,EAAA;QACc,IAAd,CAAA,cAAA,GAAA,cAAA,CAAA;QACc,IAAd,CAAA,wBAAA,GAAA,wBAAA,CAAA;KACA;IAxCA,OAAA,8BAAA,CAAA;;;;;;;;CAMA,CAAA,EAAA,CAAA;;;;;;;;AAgBA,IAAA,yBAAA,IAAA,YAAA;;;;;;;;;QAVG,IAIH,CAAA,UAAA,GAAA,UAAA,CAAA;QACI,IAAJ,CAAA,WAJiB,GAIjB,WAAA,CAAA;QACA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA;;;;;QAcG,IAUH,CAAA,QAAA,GAVG,CAUH,CAAA;;;;;;;;QAsBI,IAAJ,CAAA,WAAA,GAAA,EAAA,CAAA;;;;;;QAMA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,YAAA,CAAA,aAAA,CAAA;;;;;;;;;YASA,OAAA,IAAA,CAAA,IAAA,KAAA,KAAA,CAAA;;QAEI,UAhBM,EAgBV,IAAA;;;IAIA,MAAA,CAAA,cAAA,CAAA,yBAAA,CAAA,SAAA,EAAA,kBAhB4D,EAgB5D;;;;;QAOI,GAAJ,EAAA,YAAA;YACA,OAAA,IAAA,CAAA,iBAAA,CAAA,YAAA,EAAA,CAAA;;;QAII,YAAJ,EAAA,IAAA;;;;;;;QAQA,GAAA,EAAA,YAAA;;SAGA;;QAGA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;;;;;IAKA,yBAAqB,CAArB,SAAA,CAAA,OAAA,GAAA,YAAA,GAAA,CAAA;;;;;;;;;;;;;;;QAiBA,qBAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,EAAA,CAAA;;QAEI,qBAAJ,YAAA,GAAA,IAAA,CAhBwB,cAgBxB,CAAA,eAhByD,EAgBzD,CAAA;;QAEI,qBAAJ,aAAA,GAAA,IAAA,CAhByB;QAkBrB,qBAhBI,gBAgBR,GAhB2B,IAgB3B,CAAA;;;QAGA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,IAAA,CAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;;;;;;;;gBAQA,IAAA,CAAA,mBAjBG,CAiBH,OAAA,EAAA,WAAA,EAAA,YAAA,EAAA,GAAA,CAAA,CAAA;;gBAEA,IAAA,CAAA,sBAAA,GAAA,GAAA,CAAA;;;;;;;iBAOA,IAAA,CAAA,aAAA,IAAA,aAAA,CAAA,WAAA,GAAA,YAAA,CAAA,WAAA,EAAA;gBAGA,aAAA,GAjBU,YAiBV,CAAA;gBACA,gBAAA,GAAA,GAAA,CAAA;aACA;;;;;;KAMA,CAAA;;;;;;;;;QASA,qBAAA,WAAA,GAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;QACI,qBAAJ,YAAA,GAAA,IAAA,CAAA,cAAA,CAAA,eAAA,EAAA,CAAA;QACI,qBAAJ,YAAA,GAAA,IAAA,CAAA,sBAAA,IAAA,IAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,CAAA;QACA,qBAAA,WAAA,GAAA,IAAA,CAAA,yBAAA,CAAA,UAAA,EAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;KAMA,CAAA;;;;;;;;;KAUA,CAAA;;;;;;IAuBA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,MAAA,EAAA;QAhBA,IAAA,CAAW,QAAX,GAAA,MAAA,CAAA;QAiBA,OAAA,IAhBU,CAAI;KAiBd,CAAA;;;;;;IAMA,yBAAA,CAAA,SAhBiC,CAgBjC,WAAA,GAAA,UAAA,MAAA,EAAA;QACA,IAAA,CAAA,QAAA,GAAA,MAAA,CAAA;QAEI,OAhBO,IAgBX,CAhBe;KAiBZ,CAAH;;;;;;;;;;;;;;IAkBA,yBAnBQ,CAmBR,SAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA;QACI,OAnBK,IAmBT,CAAA,MAAA,GAAA,IAAA,CAAA,IAnBkC,GAmBlC,IAAA,CAAA,KAAA,CAAA;KACA,CAAA;;;;;;;IAKA,yBAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,UAAA,UAAA,EAAA,GAAA,EAAA;QAEI,qBAnBI,YAmBR,GAAA,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CAAA;QACI,qBAAJ,UAAA,GAAA,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA,CAAA;QACA,qBAnBsB,CAmBtB,CAAA;QACA,IAAA,GAAA,CAAA,OAAA,IAAA,QAAA,EAAA;YAnBA,CAAW,GAAX,YAAA,IAAA,UAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA;SAoBA;aACA;;SAGA;QACI,qBAnBI,CAAA,CAmBR;;YAGA,CAAA,GAAA,UAAA,CAAA,GAAA,IAAA,UAnBuB,CAAA,MAmBvB,GAAA,CAAA,CAAA,CAAA;SACA;aACA;YACA,CAAA,GAAA,GAAA,CAAA,OAAA,IAAA,KAAA,GAAA,UAAA,CAAA,GAAA,GAAA,UAAA,CAAA,MAnBoD,CAmBpD;;QAGI,OAAJ,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAnBQ,CAmBR;KACA,CAAA;;;;;;;;;;;;;;QAgBI,qBAAJ,aAAA,CAAA;QACI,IAAJ,GAAA,CAAA,QAAA,IAAA,QAAA,EAAA;YACM,aAAN,GAAA,CAAA,WAAA,CApBmB,KAoBnB,GAAA,CAAA,CAAA;SACK;aAEL,IAAA,GAAA,CAAA,QAAA,KAAA,OAAA,EAAA;YACM,aAAN,GAAA,IAAA,CApBuB,MAoBvB,GAAA,CAAA,WAAA,CAAA,KAAA,GApB8C,CAoB9C,CApB2D;SAqB3D;aACA;YACM,aAAN,GAAA,IAA0B,CAA1B,MApBiC,GAoBjC,CAAA,GAAA,CAAA,WAAA,CApBkC,KAoBlC,CAAA;SACK;QACL,qBAAA,aAAA,CAAA;;;;;;;;QAUI,qBAAJ,CAAA,GAAA,WAAA,CAAA,CAAA,GAAA,aAAA,GAAA,IAAA,CAAA,QAAA,CAAA;QACA,qBAAA,CAAA,GAAA,WAAA,CAAA,CAAA,GAAA,aAAA,GAAA,IAAA,CAxB0C,QAwB1C,CAAA;;QAEA,qBAAA,YAAA,GAAA,CAAA,GAAA,CAxB0B,CAwB1B;QACA,qBAAA,aAAA,GAAA,CAAA,CAxBY,GAAe,WAwB3B,CAAA,KAAA,IAxBgD,YAwBhD,CAAA,KAAA,CAAA;QAEA,qBAAA,WAAA,GAAA,CAAA,GAxB6B,CAwB7B,CAAA;QACA,qBAAA,cAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA,MAAA,IAAA,YAAA,CAAA,MAAA,CAAA;;;;;;;;KApBA,CAAA;;;;;;;IAsCA,yBAAA,CAAA,SAAA,CAAA,2BAAA,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;;;;;;;;;YAzBA,gBAAA,EAAA,IAAA,CAAA,gBAAA,CAAA,aAAA,EAAA,qBAAA,CAAA;YAuCA,oBAAA,EAAA,IAAA,CAlCU,oBAkCV,CAAA,aAAA,EAAA,qBAAA,CAAA;;;;;;;;;;;;;YAgBA,qBAAA,WAAA,GAAA,aAAA,CAAA,KAAA,GAAA,eAAA,CAAA,IAAA,CAAA;YACQ,qBAlCqB,YAkC7B,GAAA,aAAA,CAAA,IAAA,GAAA,eAAA,CAAA,KAAA,CAAA;YACM,OAAN,YAAA,IAA6B,YAA7B,IAAA,WAAA,IAAA,YAAA,CAlCkE;SAmC7D,CAAL,CAAA;KAlCA,CAAA;;;;;;;IA0CA,yBAAA,CAlCuB,SAkCvB,CAAA,gBAAA,GAlCqD,UAkCrD,aAAA,EAAA,gBAAA,EAAA;;;YAKA,qBAAA,YAAA,GAAA,aAAA,CAAA,MAAA,GAlCmE,eAkCnE,CAAA,MAAA,CAAA;YAEA,qBAAA,WAlCwC,GAAG,aAkC3C,CAAA,IAAA,GAAA,eAAA,CAAA,IAAA,CAAA;YACA,qBAAA,YAlCmB,GAkCnB,aAAA,CAAA,KAAA,GAAA,eAAA,CAAA,KAAA,CAAA;YACA,OAAA,YAAA,IAAA,YAAA,IAAA,WAAA,IAAA,YAAA,CAAA;;;;;;;;;;;IAWA,yBAAA,CAAA,SArCiC,CAqCjC,mBAAA,GAAA,UAAA,OAAA,EAAA,WAAA,EAAA,YAAA,EAAA,GAAA,EAAA;QACA,qBAAA,QArC+B,GAqC/B,IAAA,CAAA,cAAA,CAAA,eAAA,EAAA,CAAA;;;;;;;;;;;;;QAaA,qBAAA,uBAAA,CAAA;QACA,IAAA,IAAA,CAAA,IAAA,KAAA,KAAA,EAAA;;SDncA;;;;;;QAMA,qBAAA,CAAA,GAAA,uBAAA,KAAA,MAAA;YAAA,YAAA,CAAA,CAAA;YAGA,QAAA,CAAA,KAAA,IAAA,YAAA,CAAA,CAAA,GAAA,WAAA,CAAA,KAAA,CAAA,CAAA;;;QAGU,CAAV,KAAA,EAAA,QAAU,EAAV,MAAA,EAAA,OAAA,CAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,OAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,CAAA;QACU,OAAV,CAAA,KAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA;QACU,OAAV,CAAA,KAAA,CAAA,uBAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA;KACA,CAAA;;;;;;;;;YAOA,GAAA,EAAA,kBAAA,CAAA,GAAA;YACQ,KAAR,EAAA,kBAAA,CAAA,IAAA,GAAA,kBAAA,CAAA,KAAA;YACQ,MAAR,EAAA,kBAAA,CAAA,GAAA,GAAA,kBAAA,CAAA,MAAA;YACQ,IAAR,EAAA,kBAAA,CAAA,IAAA;SACA,CAAA;KACG,CAAH;;;;;;;IAOA,yBAAA,CAIwB,SAJxB,CAAA,kBAAA,GAAA,UAAA,MAAA,EAAA;QACI,IAAI,SAAR,GAIU,EAJV,CAIuB;QAHnB,KAIK,IAJT,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;YACA,SAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;SACA;;;;;;CAMA,EAAA,CAAA,CAAA;;;;;;;;;;;QAWA,IAAA,CAAA,aAAA,GAAA,EAAA,CAAA;QACI,IAAI,CAIC,WAAC,GAAa,EAAA,CAAG;QAHtB,IAAI,CAIC,YAAC,GAAc,EAJxB,CAAA;QACI,IAAI,CAIC,WAJT,GAAA,EAAA,CAAA;QACI,IAAJ,CAAA,eAAA,GAAA,EAAA,CAAA;QACA,IAAA,CAAA,MAAA,GAAA,EAAA,CAAA;;;;;;;;;;QAWI,IAAI,CAAR,UAAA,GAAA,KAAA,CAAA;QACA,IAAM,CAAN,WAAA,GAIiB,YAJjB,CAAA;QACA,OAAA,IAAA,CAAA;KAEA,CAAA;;;;;;;QAOA,IAAA,CAAA,YAAA,GAAA,EAAA,CAAA;QACI,IAAI,CAIC,WAJT,GAAA,KAAA,CAAA;;;KAIA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6BA,sBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAA,KAAA,EAAA;;;;;;;;KAQA,CAAA;;;;;;IAMA,sBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,KAAA,EAAA;QAEI,IAAJ,CAAA,OAAA,GAAA,KAAA,CAKQ;;;QADJ,IAAJ,KAAA,KAAA,MAAA,EAAA;YACA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAKwB;SAJxB;QACI,OAKO,IALX,CAAA;KACA,CAAA;;;;;;;;;;QAYA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;QACI,IAAI,CAAR,eAAA,GAAA,QAAA,CAAA;QACA,OAAA,IAAA,CAAA;KACA,CAAA;;;;;;;;IDpJA,sBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;;;;QAIA,OAAA,IAAA,CAAA;KADA,CAAA;;;;;;;;IAQA,sBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAA,OAAA,EAAA;;;;;;;;QAQA,qBAAA,YAAA,GAAA,EAAA,OAAA,CAAA,UAAA,GAAA,KAAA,CAAA;QAII,MAAJ,CADW,QACX,GAAA,IAAA,CAAA,YAAA,CADe;QAEf,MAAA,CAAA,SAAA,GAAA,IAAA,CAAA,UAAA,CAAA;;QAAA,MAAA,CAAA,YAAA,GAAA,IAAA,CAAA,aAAA,CAAA;QAEA,MAAA,CAAA,WAAA,GAAA,IAAA,CAAA,YAAA,CAAA;QACA,MAAA,CAAA,KAAA,GAAA,IAAA,CAAA,MAAA,CAAA;;;;QACA,OAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAC;KAID,CAAC;;;;;;;YDnCD,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA,WAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;;;;;CAOA,EAAA,CAAA,CAAA;;;;;;;;IASA,SAAA,sBAAA,CAAA,cAAA,EAAA;QACA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA;KACA;;;;;;;;;;;;;;;IAcA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAA;;;;;;IAOG,EAAH,IAAA,EAAAE,wBAAA,EAAA;CAAA,CAAA;;;;AAKA,sBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IAEA,EAAA,IAAA,EAAA,aAAA,GAAA;CACA,CAAA,EAAA,CAAA;;;;;AAIA,IAAA,gBAAA,IAAA,YAAA;;;;;;;;;;;;;;YAgCA,IAAA,IAAA,CAAA,iBAAA,EAAA;gBAxBc,IAyBd,CAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAzB0C,CAAiB,WAyB3D,CAAA,CAAA;gBAxBc,IAyBd,KAAA,EAAA;oBACA,IAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;;aD7EA;;;QAGA,UAAA,EAAC,IAAD;;;;;;;;;;;;;QAaA,OAAA,IAAA,CAAA,iBAAA,CAAA;;;;;;;;;QASA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,uBAAA,CAAA,CAAA;QANsB,IAAtB,IAAA,CAAA,WAAA,EAAsB;YACtB,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,CAAsB,WAAtB,CAAA,CAAA;SACA;QACsB,QAAtB,CAAA,IAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CAAA;QACsB,IAAtB,CAAA,iBAAA,GAAA,SAAA,CAAA;KACA,CAAA;IAAA,OAAA,gBAAA,CAAA;;;;;;;;AAcA,gBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;IAMA,OAAA,eAAA,IAAA,IAAA,gBAAA,EAAA,CAAA;CACA;AACA,IAAA,0BAAA,GAAA;;;;;CACA,CAAA;;;;AASA,IAAA,YAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;IAsBA,SAAA,OAAA,CAAA,iBAAA,EAAA,yBAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;QADA,IAAA,CAAA,SAAC,GAAA,SAAD,CAAA;QAMA,IAAO,CAAP,OAAA,GAAA,OAAA,CAA0B;KAC1B;;;;;;IAQA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,QAAA,EAAA;;;KAyBA,CA7BC;;;;;;;QDrED,OAAA,IAAA,CAAA,gBAAA,CAAA;;;;;;IAUA,OAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;;;;;QAKA,OAAA,IAAA,CAAA;;;;;;;;QAKA,OAAA,IAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAAA,yBAAA,EAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA;KACA,CAAE;;;;;;;;QAMF,OAAA,IAAA,UAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA;KAGA,CAAC;IACD,OAAA,OAAA,CAAA;CAGA,EAAA,CAAA,CAAA;;;CAeA,CAAA;;;;;;;;;IAsHA,EAAA,IAAA,EAAAG,sBAAA,GAAA;IAxCA,EAAA,IAAA,EAAAD,oBAAA,GAAc;CACd,CAAA,EAAA,CAAA;;;;AApFA,IAAA,iBAAU,GAAmB;IAC7B,OAAA;;;;CA+EA,CAAA;;;;AAIA,IAAA,mBAAA,GA5BI;;;;;;;;AAkDJ,IAAA,aAAA,IAAA,YAAA;;;;IAIA,SAAA,aAnCI,CAmCJ,UAAA,EAAA;;;;CAIA,EAAA,CAAA,CAAA;AAgBA,aAAS,CAAT,UAAA,GAAA;IACA,EAAA,IAAA,EAAArB,uBAAA,EAAA,IAAA,EAAA,CAAA;;;;;;;;;;;;;;AA/FA,IAAA,yBAAA,IAAA,YAAA;;;;;;;;;IASA,SAAA,yBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,IAAA,EAAA;QACA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;;;;;QAhBG,IAqBH,CAAA,QAAA,GAAA,CAAA,CAAA;QACI,IAAI,CArBC,QAAC,GAAU,CAqBpB,CAAA;;;;QAIA,IAAA,CAAA,cAAA,GAAA,IAAA,wBAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;;;;;;;;;;;;QAQG,IAgCH,CAAA,cAAA,GAAA,IAAAH,0BAAA,EAAA,CAAA;;;;;;;;QAyCI,IAAJ,CAAA,MA3CW,GA2CX,IAAAA,0BAAA,EAAA,CAAA;QACA,IAAA,CAAA,eAAA,GAAA,IAAA,cAAA,CAAA,WAAA,EAAA,gBAAA,CAAA,CAAA;;;;;;;QAOA,GAAA,EAAA,YAAA;;;;;;;;;;;aAWA;SACA;QACA,UAAA,EAAA,IAlDkB;QAmDlB,YAAA,EAAA,IAAA;KACG,CAAH,CAAA;;;;;;QAMI,GAAJ,EApDS,YAoDT;YACM,OAAN,IAAA,CAAA,QAAA,CAAA;SACK;;;;;;;YA9CL,IAAG,IAAH,CAAA,SAAA,EAAA;gBAuDA,IAAA,CAAA,SAAA,CAAA,WAtDQ,CAsDR,OAAA,CAAA,CAAA;aAEA;SACA;QACA,UAAA,EAAA,IAAA;QAEI,YAAJ,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,yBAAA,CAAA,SAAA,EAAA,aAAA,EAAA;;;;;QAOA,GAAA,EAAA,YAAmB;YACnB,OAAA,IAAA,CAAA,YAAA,CAAA;SAEA;;;;;QAOI,GAAJ,EAAA,UAAA,KAAA,EAAA;YACA,IAAA,CAAA,YAAA,GAAA,qBAAA,CAAA,KAtDuD,CAsDvD,CAAA;SAEA;QACA,UAAA,EAAA,IAAA;;;;;;;;QAQI,GAAJ,EAAA,YAAA;YAEA,OAAA,IAAA,CAAA,WAAA,CAAA;SACA;QACA,UAAA,EAAA,IAxDQ;QAyDR,YAAA,EAAA,IAAA;KAEA,CAAA,CAAA;IAEA,MAAA,CAAA,cAAA,CAAA,yBAAA,CAAA,SAAA,EAAA,KAAA,EAAA;;;;;;YArDA,OAAA,IAAA,CAAA,IAAA,GAAA,IAAG,CAAH,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;SA4DA;QACA,UAAA,EAAc,IAAd;QAIA,YAAA,EAAA,IAAA;KAEA,CAAA,CAAA;;;;;;;;;;;IAYA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,OAAA,EAAA;QACI,IAAI,OAAR,CAAA,MAAA,CAAA,EAAA;YACQ,IAAR,CAAA,IAAA,GAAA,IAAA,CAAA,cAAA,EAAA,GAAA,IAAA,CAAA,cAAA,EAAA,CAAA;SAEA;KACA,CAAA;;;;;IAMA,yBAAA,CAAA,SA7D4B,CA6D5B,cAAA,GAAA,YAAA;QACA,IAAA,CAAO,IAAP,CAAA,SAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,EAAA;YACA,IAAA,CAAA,SAAA,GAAA,mBAAA,CAAA;SACA;;;;;;;IAOA,yBA/DuB,CA+DvB,SAAA,CAAA,YAAA,GAAA,YAAA;QACA,qBAAA,aAAA,GAAA,IAAA,YAAA,EAAA,CAAA;QACA,IAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,KAAA,CAAA,EAAA;YAEQ,aAAR,CAAA,KAAA,GAAA,IA/Dc,CA+Dd,KAAA,CAAA;SACA;QACA,IAAM,IAAI,CA/DC,MA+DX,IAAA,IAAA,CAAA,MA/DY,KA+DZ,CAAA,EA/DwC;YAgExC,aAAA,CAAA,MAAA,GAAA,IAAA,CAAA,MAAA,CAAA;SAEA;QACA,IAAM,IAAI,CA/DC,QA+DX,IAAA,IAAA,CA/D2B,QA+D3B,KAAA,CAAA,EAAA;YACA,aAAA,CAAA,QAAA,GAAA,IAAA,CAAA,QAAA,CAAA;SACA;;;;;QA5DA,IAAA,IAAA,CAAA,aAAA,EAAA;YAkEQ,aAAR,CAAA,aAAA,GAAA,IAAA,CAAA,aAAA,CAAA;SACA;QACA,IAAA,CAAA,SAAA,IAAA,IAAA,CAAA,uBAAA,EAAA,CAAA,CAAA;QAEI,aAAJ,CAAA,gBAjEc,GAiEd,IAAA,CAAA,SAAA,CAAA;QACA,aAAA,CAAA,cAAA,GAjEiC,IAiEjC,CAAA,cAAA,CAAA;QACA,OAAA,aAAA,CAAA;KAzCA,CAAA;;;;;IAiDA,yBAAA,CAAA,SAAA,CAAA,uBAAA,GAAA,YAAA;QACA,qBAAA,GAAA,GAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;;;;;aA9DA,WAAA,CAAA,IAAA,CAAA,OAAA,CAAA;aACS,WAmET,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;QACA,IAAM,CAAN,sBAAA,CAAA,QAAA,CAAA,CAAA;QACA,OAAA,QAAA,CAAA;KACA,CAAA;;;;;IAIA,yBAnEyB,CAAA,SAmEzB,CAAA,sBAAA,GAAA,UAAA,QAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAU,CAAV;QACA,KAAA,qBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;YACA,QAAA,CAAA,oBAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,OAAA,EAAA,OAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,OAAA,EAAA,EAAA,EAAA,QAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,QAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA;SACA;;;;;;;;IAQA,yBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;QACA,IAAO,KAAP,GAAA,IAAA,CAAA;QACA,IAAO,CAAP,IAAY,CAAZ,WAAwB,EAAxB;YACA,IAAA,CAAA,cAAA,EAAA,CAAA;SApEA;QAsEA,IAAQ,CAAR,SAAA,CArEmB,aAqEnB,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;QACA,IAAA,CAAA,WArEgB,CAqEhB,QArE4B,EAAE,CAqE9B,SAAA,GAAA,IAAA,CAAA,GAAA,CAAA;QACA,IAAA,CAAS,mBAAT,EAAA,CAAA;QACA,IAAA,CAAS,IAAT,CArEc,WAAM,CAqEpB,WAAA,EAAA,EAAA;YACA,IArEY,CAqEZ,WAAA,CArEwB,MAqExB,CAAA,IAAA,CAAA,eAAA,CAAA,CAAA;YACQ,IAAR,CArEa,MAAM,CAqEnB,IArEmB,EAAM,CAqEzB;SACA;QACA,IAAA,IAAA,CArEa,WAqEb,EAAA;YACA,IAAA,CAAA,qBAAA,GAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA,CAAA,SAAA,CAAA,YAAA;gBACA,KAAA,CArEkB,aAqElB,CArE2B,IAAQ,EAqEnC,CAAA;aApEQ,CAqER,CArEW;SAsEX;KACA,CAAA;;;;;IAOA,yBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;;YAnEA,IAAA,CAAA,WAAA,CAAA,MAAA,EAAA,CAAA;YACQ,IA0KR,CAAA,MAAA,CAAA,IA1KwB,EA0KxB,CAAA;SACA;QACA,IAAA,IAAE,CAAF,qBAAA,EAAA;YACA,IAAE,CAAF,qBAAA,CAAA,WAAA,EAAA,CAAA;YACA,IAAE,CAAF,qBAAA,GAAA,IA1Ke,CAAiB;SA2KhC;QACA,IAAA,IAAA,CAAA,eAAA,EAAA;;;;;;;;;;YDthBA,IAAA,CAAA,WAAA,CAAA,OAAA,EAAA,CAAA;;;;SAIA;QAMsB,IAAtB,IAAA,CAAA,qBAAA,EAAA;YAAA,IAAA,CAAA,qBAAA,CAAA,WAAA,EAAA,CAAA;;;;;;;;;;IAIA,yBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;;;;;;;;;;IAUA,EAAA,IAAA,EAAAG,uBAOG,EAPH,IAAA,EAAA,CAAA;gBACA,QAAA,EAOW,qEAPX;gBACA,QAAA,EAAA,qBAAA;;;;;;;;IAQA,EAAA,IAAA,EAAAL,uBAAA,GAAA;IAEA,EAAA,IAAA,EAAA,gBAAA,GAAA;IAEA,EAAA,IAAA,EAAQqB,yBAAR,GAQsB;IANtB,EAAA,IAAA,EAAMZ,8BAAN,GAAA;;CAGA,CAAA,EAAA,CAAA;AACA,yBAAA,CAAA,cAAA,GAAA;IACA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAAZ,mBAAA,EAAA,EAAA;;IAGA,SAAA,EAAA,CAAU,EAAV,IAQgB,EARhBA,mBAAA,EAQiB,EARjB;IACA,SAAA,EAAA,CAAQ,EAAR,IAAA,EAAAA,mBAQqB,EARrB,EAAA;IACA,OAAA,EAAO,CAAP,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;;IAGA,UAAA,EAAU,CAQC,EARX,IAAA,EAAAA,mBAAA,EAQ0B,EAR1B;IACA,WAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IACA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IAEA,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IAEA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IACA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IAEA,eAQS,EART,CAAA,EAAA,IAAA,EAAAD,oBAAA,EAAA,EAAA;IACA,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,oBAQ+B,EAAE,EARjC;IACA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,oBAAA,EAAA,EAAA;IAEA,QAAQ,EAAR,CAAA,EAAA,IAAA,EAAAA,oBAAA,EAAA,EAQqB;;;IALrB,SAAA,aAAA,GAAA;KACA;IAEA,OAAA,aAAA,CAQqB;CAPrB,EAAA,CAAA,CAAA;;IAEA,EAAA,IAAA,EAAAQ,sBAAA,EAAA,IAAA,EAQe,CAAM;gBAPrB,OAAA,EAAA,CAAA,YAAA,EAAA,oBAAA,CAAA;gBAQA,OAAA,EAAkB,CAAI,yBAAtB,EAAA,aAAA,EAAA,oBAAA,CAAA;;gBANQ,SAAR,EAQe,CAAK,iBARpB,CAAA;aACO,EAAP,EAAA;CACA,CAAA;;;;AAKA,aAAA,CAAA,cAQe,GARf,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;AAIA,IAAA,oBAAA,IAAA,YAAA;;;;IAKA,SAAA,oBAAA,CAAA,SAAA,EAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAiDA,qBAAA,YAAA,IAAA,SAAA,CAAA,OAAA,CAAA,CAAA,YAAA,CAAA,CAAA;;;;YAIA,IAAA,gBAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,EAAA;;;;;;aAMA;;YAEA,IAAA,CAAA,IAAA,CAAA,SAnBsB,CAmBtB,KAAA,IAAA,IAAA,CAAA,SAAA,CAAA,MAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,YAAA,CAAA,EAAA;gBANS,OAOT,KAAA,CAnBmB;aAanB;SAQA;QACA,qBAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA,WAAA,EAAA,CAAA;;;;;;;;YAQA,OAAA,KAAA,CAAA;;;;;;aAMA;iBACA,IAAA,IAAA,CAzBS,SAAwB,CAyBjC,KAAA,EAAA;;;;;;;;gBAQA,OAAA,KA5B0B,CA4B1B;aACA;;;;;;QAMA,IAAA,QAAA,KAxBC,QAwBD,KAAA,IAAA,CAAA,SAAA,CAAA,KAAA,IAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,EAAA;;YAEA,OAAA,KAAA,CAAA;;;;;;QAMA,OAAA,OAAA,CAAA,QAAA,IAAA,CAAA,CAAA;KANA,CAAA;;;;;;;IAgBA,oBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,OAAA,EAAA;;;;;;;;;CAUA,CAAA;;;;;IAME,EAAF,IAAA,EAAA,QAAA,GAAA;CALA,CAAA,EAAE,CAAF;;;;;;;;;IAgBE,OAAF,CAAA,EAAA,OAAA,CAAA,WAAA,IAtCkB,OAsClB,CAtCkB,YAAa,IAAW,OAsC1C,CAAA,cAAA,EAAA,CAAA,MAAA,CAAA,CAAA;CAEA;;;;;;;;;;;QAWA,QAAA,KAAA,UAAA,CAhCC;;;;;;;AAwCD,SAAA,aAAA,CAAA,OAAA,EAAA;IACA,OAAA,cAvCuB,CAuCvB,OAvC+B,CAAC,IAuChC,OAAA,CAAA,IAAA,IAAA,QAAA,CAAA;CACC;;;;;;AAMD,SAAA,gBAAA,CAAA,OAAA,EAAA;IACE,OA1CO,eA0CT,CAAA,OAAA,CAAA,IAAA,OAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA;CACC;;;;;;;;;;;;;;;;;;;;;;AD5ND,SAAA,gBAAqB,CAArB,OAAA,EAAA;IACA,IAAA,CAAA,OAAU,CAAC,YAAX,CAAwB,UAAxB,CAAA,IAAA,OAAA,CAAA,QAAA,KAAA,SAAA,EAAA;QACA,OAAA,KAAA,CAAA;KACG;;;;;KA5BH;;;;;;;;;AAUA,SAAK,gBAAL,CAAA,OAAA,EAAA;IACA,IAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,EAAA;;;;;IAsBA,OAZG,KAYH,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;CACA;;;;;;AAQA,SAAA,wBAZ6B,CAY7B,OAAA,EAZ8B;IAa9B,qBAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA,WAAA,EAAA,CAAA;;;;;;CAMA;;;;;;;AASA,SAAA,sBAAA,CAAA,OAZmC,EAYnC;;IAEA,IAAA,aAAA,CAAA,OAAA,CAAA,EAAA;QAEA,OAAA,KAAA,CAAA;KACA;IACA,OAZO,mBAYP,CAAA,OAAA,CAAA;QACA,gBAAA,CAAA,OAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BA,SAAA,SAAA,CAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,YAAA,EAAA;;;;;QAKA,IAAA,CAAA,QAAA,GAAA,IAhBG,CAgBH;QACI,IAAJ,CAAA,YAAA,EAAA;YACA,IAAA,CAAA,aAAA,EAAA,CAAA;SAEA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,SAAA,CAAA,SAAA,EAAA,SAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA,EAAA,OAAA,IAhBgC,CAgBhC,QAAA,CAAA,EAAA;;;;;;;;gBAXA,IAAA,CAAA,YAAG,CAAH,QAAA,GAAA,IAAA,CAAA,UAAA,CAAA,QAAA,GAAA,IAAA,CAAA,QAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA;aAoBA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;IASA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;QAEA,IAAM,IAAI,CAAV,YAnBW,IAmBX,IAAA,CAAA,YAAA,CAAA,UAAA,EAAA;YACA,IAAQ,CAAR,YAAA,CAAA,UAAA,CAAA,WAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CAAA;SACA;QACA,IAAA,IAAA,CAAA,UAAA,IAAA,IAAA,CAAA,UAAA,CAAA,UAAA,EAAA;YAEA,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;SACA;;;;;;;;IAQA,SAAA,CAAA,SAtBa,CAAK,aAsBlB,GAAA,YAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;;YAGA,IAAA,CAAA,YAtBQ,GAsBR,IAAA,CAtBQ,aAsBR,EAAA,CAtByB;SAwBzB;QACA,IAAM,CAAN,IAAA,CAAA,UAAA,EAAA;YACA,IAAQ,CAAR,UAAA,GAAA,IAAA,CAAA,aAAA,EAAA,CAAA;SACA;QAEA,IAAM,CAAN,OAAA,CAAA,iBAAA,CAAA,YAAA;YACA,KAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,YAAA,EAAA,OAAA,KAAA,CAAA,wBAAA,EAAA,CAAA,EAAA,CAAA,CAAA;YACA,KAAA,CAAA,UAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,YAAA,EAAA,OAAA,KAAA,CAAA,yBAAA,EAAA,CAAA,EAAA,CAAA,CAAA;YACA,KAAA,CAAA,QAAA,CAAA,UAAA,CAAA,YAAA,CAAA,KAAA,CAAA,YAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA;YAEA,KAAA,CAAA,QAAA,CAAA,UAAA,CAAA,YAAA,CAAA,KAAA,CAAA,UAAA,EAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,CAAA;SACA,CAAA,CAAA;;;;;;;IAOA,SAAA,CAAU,SAxBE,CAwBZ,kCAAA,GAAA,YAAA;QACI,IAAJ,KAAA,GAAA,IAxBY,CAAS;QAyBjB,IAAJ,CAAA,OAAA,CAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,SAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,yBAAA,EAAA,CAAA,EAAA,CAAA,CAAA;KACA,CAAA;;;;;;IAsBA,SAAA,CAAA,SAAA,CAAA,iCAAA,GAAA,YAAA;;;;;;;;IAtCA,SAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,YAAA;;;;;;KAkDA,CAAA;;;;;IAIA,SAAA,CAAA,SAAA,CAhDmB,wBAgDnB,GAAA,YAAA;QACA,qBAAA,YAAA,GAAA,IAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,iBAAA,CAAA,CAAA;;;;SA9CA;aAmDA;YACO,iBAAP,GAAA,IAAA,CAAA,uBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;SACA;QAGA,IAAA,iBAAA,EAAA;;;;;;;;;IAoCA,SAAA,CAAA,SAAA,CAAA,wBAAA,GAAA,UAAA,IAAA,EAAA;QAtEsB,IAAtB,IAAA,CAAA,QAAA,CAAA,WAAA,CAAsB,IAAtB,CAAA,IAAA,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA,IAAA,CAAA,EAAA;YAAA,OAAA,IAAA,CAAA;SAwEA;;;;;;gBA7EG,IA+DH,CA/D4B,wBA+D5B,mBAAA,QAAA,CAAA,CAAA,CAAA,EAAA;;;;;SAKA;QACI,OAAJ,IAAA,CAAA;KACG,CAAH;;;;;;IAcA,SAAA,CAAA,SAAA,CAAA,uBAAA,GAAA,UAAA,IAAA,EAAA;;;;;QAKI,qBAAJ,QAAA,GAAA,IAAA,CAAA,QAAA,IAAA,IAAA,CAAA,UAAA,CAAA;QACA,KAAA,qBAAA,CAAA,GAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;;gBA1EA,IAAA,CAAA,uBAAA,mBAAA,QAAA,CAAA,CAAA,CAAA,EAAA;gBA4EA,IAAA,CA3EQ;YA4ER,IAAE,aAAF,EAAA;gBACA,OAAA,aAAA,CAAA;aACA;;;;;;;;IArEA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;QA8EA,qBAAA,MAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAA;QACA,MAAA,CAAA,QAAA,GAAA,IAAA,CAAA,QAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA;QAGA,MAAA,CAAA,SAAA,CAAA,GAAA,CAAA,qBAAA,CAAA,CAAA;;;KAqBA,CAAA;;;;;;AAvFA,IAAA,gBAAA,IAAsB,YAAtB;;;;;;;;KA6FA;;;;;;;;;KAiBA,CAAA;IACA,OAAA,gBAAA,CAAA;CACA,EAAA,CAAA,CAAG;;;;;;;;IArGH,EAAA,IAAA,EAAA,oBAA2C,GAA3C;IA6GA,EA5GE,IAAA,EAAMsB,oBA4GR,GA5GQ;CA6GR,CAAA,EAAA,CAAA;;;;;;;;;;IAUA,SAAA,4BAAA,CAAA,WAAA,EAAA,iBAAA,EAAA;QA7GA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;QA+GA,IAAA,CAAS,iBAAT,GAAA,iBAAA,CAAA;QACA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;;IDxXA,MAAA,CAAA,cAAA,CAAA,4BAAA,CAAgD,SAAhD,EAAA,UAAA,EAA6E;;;;;;;;;;;;SAkB7E;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;KAOA,CAAA;;;;;;;;;AAWA,4BAAA,CAAqB,UAArB,GAA2B;IAC3B,EAAA,IAAA,EAAArB,uBAAA,EAAA,IAAA,EAAA,CAAA;;;;;;;AAOA,4BAAA,CAFY,cAEZ,GAAA,YAFoD,EAEpD,OAAA;IACA,EAAA,IAAA,EAAAN,wBAAA,GAAA;IACA,EAAA,IAAA,EAAA,gBAAA,GAAA;;;;CAAA,CAAA;;;;AASA,IAAA,kBAAA,IAAA,YAAA;;;;;IAGA,SAAA,kBAAA,CAAA,WAAA,EAAA,iBAAA,EAAA;QAKA,IAJQ,CAIR,WAJmB,GAInB,WAAA,CAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;;;;;QAUA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,EAAA;;;;;;QAkBA,UAAA,EAAA,IAAA;QAEA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;;;;IAKE,kBAAF,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;QACI,IAAJ,CAhCS,SAgCT,CAhCkB,OAgClB,EAAA,CAAA;KACA,CAAA;;;;IAIA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;;KDhHA,CAAA;;CAEA,EAAA,CAAA,CAAA;AADA,kBAAA,CAAA,UAEwB,GAFxB;IACA,EAAA,IAAA,EAAAM,uBAAA,EAAS,IAAT,EAAA,CAAA;gBACE,QAAF,EAAA,gBAAA;gBACE,QAAF,EAEW,cAFX;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAKA,EAAA,IAAA,EAAAN,wBAAA,GAAC;;CDfD,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;YAgBQ,IAAR,CAAA,YAAA,GAAA,YAAA,IAD4C,IAAA,CAAK,kBACjD,EAAA,CAAA;SACA;;;;;;;;IAQA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAH4B,OAG5B,EAAA,UAAA,EAAA;QACI,IAAJ,KAAA,GAAA,IAAA,CAAA;QACI,IAAJ,UAAA,KAHuB,KAAK,CAG5B,EAAA,EAAA,UAAA,GAH8C,QAG9C,CAAA,EAAA;QACA,IAAA,CAAA,YAAA,CAAA,WAAA,GAAA,EAAA,CAAA;;;;;;;;QAQA,UAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,YAAA,CAAA,WAAA,GAAA,OAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA;KANA,CAAA;;;;;IAUA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;QANA,IAAA,IAAA,CAAW,YAAX,IAAA,IAAA,CAAA,YAAA,CAAsD,UAAtD,EAAA;YAOM,IAAN,CAAA,YAAA,CAAA,UAAA,CAAA,WAAA,CAAA,IAAA,CANiC,YAMjC,CAAA,CAAA;SACK;KACF,CAAH;;;;;;QAMA,MAAA,CAAA,SANG,CAMH,GAAA,CAAA,qBAAA,CAAA,CAAA;QACI,MAAJ,CANW,YAMX,CAAA,aANqB,EAMrB,MAAA,CAAA,CAAA;QACA,MAAA,CAAA,YAAA,CAAA,WAAA,EAAA,QAAA,CAAA,CAAA;QACA,QAAA,CAAA,IAAA,CANqB,WAMrB,CAAA,MAAA,CAAA,CAAA;QACA,OAAA,MAAA,CANqB;KAOrB,CAAA;IACA,OAAA,aAAA,CAAA;;AALO,aAAP,CAAA,UAAA,GAAA;IAOA,EANE,IAAA,EAAMyB,wBAAA,EAAW;CAOlB,CANC;;;;AAED,aAAD,CAAA,cAAA,GAAA,YAAA,EAAA,OASC;;ID9DD,EAAA,IAAA,EAAA,QAAA,GAAA;CAYA,CAAA,EAAA,CAAA;;;;;;;AALA,SAAA,+BAAA,CAAA,gBAAA,EAAA,WAAA,EAAA,QAAA,EAAA;IACA,OAAA,gBAAA,IAAA,IAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,CAAA;CACA;AACA,IAAA,uBAAA,GAAA;;IAKA,OAAA,EAAS,aAAT;IACA,IAAA,EAAA;QAEA,CAAA,IAAA1B,sBAAA,EAAA,EAAA,IAAAyB,sBAAA,EAAA,EAAA,aACQ,CADR;QAEA,CAAK,IAALzB,sBAAA,EAAA,EAAA,IAAAQ,oBAAA,CAAA,4BAAA,CAAA,CAAA;QACA,QAAA;;;;;;;;;;;;;;gBAmBG,SALH,EAAA,CAAA,oBAAA,EAAA,gBAAA,EAAA,uBAAA,CAAA;aACA,EAAA,EAAA;;;;;;;;;;;;;;;AAoBA,IAAA,0BAAA,IAAA,UAAA,MAAA,EAAA;;;;;;;;IAQG,0BAAH,CAAA,SAAG,CAAH,gBAAA,GAAA,YAAA;QACI,IAAJ,KAAA,GAAA,IAAA,CAAA;QAEI,MAAJ,CAAA,SAAA,CAAkB,gBAAlB,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACI,IAAJ,CAAA,gCAAA,EAAiC,CAAW;QAExC,IAAJ,CAAA,4BAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,gCAAA,EAAA,CAAA,EAAA,CAAA,CAAA;KACG,CAAH;;;;IAIA,0BAAA,CAAA,SAAA,CAAA,gCAAA,GAAA,YAAA;;;;QAEA,qBAAA,iBAAA,GAAA,IAAA,CAAA,oBAAA,EAAA,CAAA;;QD/EA,MAAA,CAAA,WAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;;;;;;;;;;aAyCA,IAAA,QAAA,CAAA,uBAAA,EAAA;YATA,QAAA,CAAY,gBAAZ,CAAA,wBAAA,EAAA,EAAA,CAAA,CAAA;SAEA;;;;aA1BA,IAAA,EAAA,QAAA,GAAG,mBAAH,EAAA;;;;;;;;;;;;YA2BA,EAAA,QAAA,GAAA,oBAAA;YAWQ,EAAR,QAAA,GAAA,mBAAA;YACM,IAAI,CAAV;KACA,CAAA;IACA,OAAA,0BAAA,CAAA;CAAA,CAAA,gBAAA,CAAA,CAAA,CAAA;AACA,0BAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAkB,wBAAA,EAAA;;;;;;;;;QA/BG,IAKH,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA;QACI,KALK,CAKT,OAAA,GAAA,OAAA,MAAA,KAAA,WAAA,GAAA,EAAA,MAAA,GAAA,MAAA,GAAA,IAAA,CAAA;;QAEA,KAAA,CAAA,MAAA,GAAA,KAAA,CAAA,OAAA,GAAA;YAEA,WAAA;YACA,OAAA;;;;;;QA+BA,IAAA,CAAA,KAAA,CAAA,OAAA,IAAAC,uBAAA,EAAA,EAAA;YACQ,OAAR,CAAA,IAAA,CAAA,oDAAA;gBACA,oCAAA,CAAA,CAAA;SACA;;;;;;;;;;;;;;;;IAgBA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAb4C,OAa5C,EAbyD;QAczD,qBAAA,EAAA,GAAA,IAAA,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;QAQA,qBAAA,KAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,SAAA,EAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAAA;;;;;;QAMA,QAAA,EAAA,EAdG;KAeH,CAAA;;;;;;;;IAQA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,IAAA,EAAA,OAAA,EAAA;;;;;QAKA,qBAAA,UAAA,GAAA,MAAA,IAAA,CAAA,WAAA,GAAA,OAAA,CAAA,CAAA;QACI,YAdS,CAAI,IAcjB,CAAA,IAdyB,CAAE,CAc3B;QACA,YAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA,EAAA,OAAA,UAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;IAMA,EAAA,IAAA,EAAAD,wBAAA,EAAA;CACA,CAAA;;;;;;;;;AASA,IAAA,cAAA,IAAA,YAAA;;;;;;IAQA,SAjBS,cAiBT,CAAA,QAAA,EAAA,uBAAA,EAAA,YAAA,EAAA;QACA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAA,GAAA,KAAA,CAAA,EAAA;;;;;;;;QAQA,IAAM,CAAN,UAAA,GAAA,IApBiB,GAoBjB,EAAA,CAAA;;;;QAMA,IAAM,CAAN,iBAAA,GApBgB,EAAa,CAoB7B;;;;QAIA,IAAA,CAAA,eAAA,GAAA,EAAA,CAAA;;;;;;YAjBA,IAAA,QAAA,EAAA;gBACS,uBAuBT,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA,EAAA,OAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;aACA;iBAEA;gBACQ,IAAI,CAvBC,aAuBb,CAAA,uBAAA,CAAA,CAAA,CAAA,CAAA,CAAA;aACO;;YAEP,IAAA,CAAA,eAAA,CAAA,MAAA,GAAA,CAAA,CAAA;;;;;;;;QAQA,GAAA,EAAA,YAAA;YACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;gBACA,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,MAAA,EAAA,CAAA,CAAA;aAEA;;;;QAoCA,YAAA,EAAA,IAAA;;;;;;;IAxDA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,KAAA,EAAA;QAAA,IAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAA;QA+DA,IAAA,CAAA,gBAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;QDnNA,IAAA,CAAA,UAAA,EAAA,CAAA;QAAA,IAAA,CAAA,gBAAA,EAAA,CAAA;KAGA,CAAA;;;;;;;;KAKA,CAAA;;;;;;;;;;;;IAYA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;KAAA,CAAA;;;;;;IAIA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAA,SAAA,EAAA;QAOA,IAAA,IAAA,CAAA,QAAA,IAAA,IAAA,CAAA,QAAA,EAAA;;;;;;;;;QAuBA,IAAA,IAAA,CAAA,eAAA,CAAA,MAAA,IAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,EAAA;YAxBU,qBAyBV,SAzBuC,GAyBvC,IAAA,eAAA,CAAA,IAzB0C,CAA0B,eAyBpE,EAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;YACA,IAzBc,CAyBd,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;YACA,IAAA,CAAA,iBAAA,GAAA,EAAA,CAAA;;SDpDA;;KAEA,CAAa;;;;;;;;;gBAmCS,IAStB,CAAA,UAAA,EAAA,CAT0D;aAA1D;YAAA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;;;;SAjBA;;;;;;;;QAeG,IAAH,IAAA,CAAA,UAAA,CAAG,KAAH,CAAA,EAAA;YAaQ,IAAR,CAAA,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;YACA,IAAA,IAAA,CAAA,YAAA,EAAA;;;;;;;;;IASA,cAAA,CAC0B,SAD1B,CAEyB,UAFzB,GAAA,YAAA;;QAKI,IAAI,CATC,IAAC,CAAI,OASd,EATe,EASf;YACM,IAAN,CAAA,UAAA,CAAA,OAT6B,CAS7B,UAAA,KAAA,EAAA,EAAA,OAAA,KAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACK;;IAEL,OAAA,cAAA,CAAA;CACA,EAAA,CAAA,CAAA;;;;;AAMA,IAAA,eAAA,IAAA,YAAA;;;;;IAKA,SAAA,eAAA,CAAA,KAAA,EAAA,OAAA,EAAA;QACI,IAAI,CATC,KAST,GAAA,KATsB,CAStB;;KAGA;IACA,OAAA,eAAA,CAAA;CACA,EAAA,CAAA,CAAA;;;;;;;;;;AAYA,SAAA,+BAAA,CAAA,KAAA,EAAA;;;;;;;;;;;;AAcA,IAAA,yBATY,IASZ,YATuC;IAUvC,SAAA,yBAAA,GAAA;QACA,IAAA,CAAA,UAAA,GAAA,EAAA,CAAA;;;;;;;;IAQA,yBAAA,CATG,SASH,CAAA,MAAA,GAAA,UAAA,EAAA,EAAA,IAAA,EAAA;QACI,KATK,IAST,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,IAAA,CAAA,UAAA,EAAA,EAAA,GATgD,EAShD,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;YACA,IATY,QAAQ,GASpB,EAAA,CAAA,EAAA,CAAA,CAAA;YACA,QAAA,CAAA,EAAA,EAAA,IAAA,CAAA,CAAA;;;;;;;;IAQA,yBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,QAAA,EAAA;QACA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;;;;AAMA,yBAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAMA,wBAAN,EAAA;CACA,CAAA;;;;AAKA,yBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;AASA,IAAA,oCAAA,GAAA;;IAEA,OAAA,EAAA,yBAAA;IACA,IAAA,EAAA,CAAA,CAAA,IAAA1B,sBAAA,EAAA,EAAA,IAAAyB,sBAAA,EAAA,EAAA,yBAAA,CAAA,CAAA;IACA,UAAA,EAAU,4CAAV;CACA,CAAA;;;;;;;AAQA,IAAA,kBAAA,IAAA,YAAA;;;;;;;;QAHA,IAAA,CAAA,SAAA,GAAG,SAAH,CAAA;;;;QAeA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA;;;;QAKI,IAAJ,CAAA,cAAA,GAAA,KAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAoCI,qBAAJ,aAAA,GAAA,UAAA,KAAA,EAAA,EAAA,OAAA,KAAA,CAAA,QAAA,CAAA,KAAA,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA;QACA,qBAVyB,YAUzB,GAAA,UAVkD,KAUlD,EAAA,EAAA,OAAA,KAVuE,CAUvE,OAAA,CAAA,KAAA,EAAA,OAV8F,CAAC,CAU/F,EAAA,CAAA;QACA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,YAAA;;;;;;;YAHG,OAAH,CAAG,mBAAH,CAAA,MAAA,EAAA,YAAA,EAAA,IAAA,CAAA,CAAA;;;;;;;;;IAoBA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,OAAA,EAAA;;;;;;;SAQA;KACA,CAAA;;;;;;;;IAMA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,OAAA,EAAA,QAAA,EAAA,MAAA,EAAA;QACA,IAAA,CAAA,8BAAA,CAAA,MAAA,CAAA,CAAA;QAEI,OAAJ,CAAA,KAAA,EAAA,CAVU;KAWV,CAAA;;;;;;;;;;SAAA;;;;QAcA,QAAA,CAAA,gBAAA,CAV0B,SAU1B,EAAA,YAAA;YACM,KAAN,CAAA,gBAAA,GAAA,IAAA,CAAA;YACA,KAAA,CAAA,8BAAA,CAAA,UAAA,CAAA,CAAA;SAEA,EAAA,IAAA,CAAA,CAAA;;;;YAPA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA;gBAWA,KAAA,CAVQ,8BAUR,CAAA,OAAA,CAAA,CAAA;aACA;;;;;QAKA,QAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,UAAA,KAAA,EAAA;YACO,IAAP,KAAA,CAAA,aAAA,IAAA,IAAA,EAAA;gBACA,YAAA,CAAA,KAAA,CAAA,aAAA,CAAA,CAAA;aAGA;;;;;;;;;SAqDA,CAAA,CAAA;;;;;;;;IAnDA,kBAAA,CAAA,SAAuD,CAAvD,WAAA,GAAA,UAAA,OAAA,EAAA,MAAA,EAAA;QAoDG,qBAAH,QAAA,GAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAAA,QAAA,CAAA;QASI,qBAAJ,WAAoC,GAApC,UAAA,SAAA,EAAA,SACwC,EADxC;YAGA,SAAA,GAAA,QAAA,CAA6B,QAA7B,CAAA,OAAA,EAAA,SAAA,CAAA,GAA4D,QAA5D,CAAA,WAAA,CAAA,OAAA,EAAA,SAAA,CAAA,CAAA;SACA,CAAA;;;;QAIA,WAAA,CAAA,mBAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA;QACI,WAAJ,CAAA,qBAAA,EAAA,MAAA,KAAA,SAAA,CA7DkD,CAAW;KA8D1D,CAAH;;;;;;IAKA,kBAAA,CAAA,SAAA,CAAA,8BAAA,GAAA,UAAA,MAAA,EAAA;;;;KA3DA,CAAA;;;;;;IAqEA,kBA/DkB,CAAA,SA+DlB,CAAA,iBAAA,GAAA,UAAA,KAAA,EAAA;;;;;;;;;;;;;;;;;;QD9YA,qBAAA,WAAA,GAAA,KAAA,CAAA,MAAA,CAAA;;;;;;;;;;IAWE,kBAAF,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,KAAA,EAAA,OAAA,EAAA;;;;;;;QDRA,IAGQ,CAHR,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAAA,aAAA,IAAA,OAAA,KAAA,KAAA,CAAA,MAAA,EAAA;YACA,OAAA;SACA;;;;;;;;YASA,IAAA,IAAA,CAAA,cAAC,IAAD,IAAA,CAAA,gBAAA,EAAA;;aDdA;;;aAGA;;gBAFA,IAAA,CAAA,OAAA,GAAA,SAAA,CAAA;aACA;SACA;QACA,IAAA,CAAA,WAAA,CAAA,OAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA;QAMA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;;;KAcA,CAAA;;;;;;;;;;;;YDlBA,OAAA;;;;KAIA,CAAA;IACA,OAAA,kBAAA,CAAA;;ADXA,kBAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;IA6BA,SAAA,eAAA,CAAA,WAAA,EAAA,mBAAA,EAAA,QAAA,EAAA;;;;;;;KAOA;;;;;;;IAOA,OAAA,eANY,CAMZ;;;;;;CAMA,CAAA;;;;;;;IAOA,EAAA,IAAA,EAAAvB,uBANY,GAMZ;;;;;;;;;;;;;CAaA;;;;;;;;;;;;;;;;;;;;;;;;CAwBA,EAAA,CAAA,CAAA;;;;;;gBAMA,SAAA,EAAA,CAAA,6BAAA,CAAA;;;;;;;;;;;;;;;;;AAiBA,eANY,CAMZ,kBAAA,GAAA,2BAAA,CAAA;;;;;;;;;;AAUA,kBAAA,CAAA,OAAA,GAAA,OAAA,CANY;;;;;;;;;;IAgBZ,IAAA,aANY,KAAA,KAMZ,CAAA,EANY,EAMZ,aAAA,GAAA,CAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCA,WALG,CAAA,SAKH,CAAA,OAAA,GAAA,UAAA,IAAA,EAAA,GAAA,CAAA;;;;;;;;;;;;;;IAcA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,QAAA,EAAA,GAAA,CAAA;;;;;;;;;;;;;IAaA,WAHS,CAGT,SAAA,CAAA,iBAAA,GAH0C,UAG1C,QAAA,EAAA,GAAA,CAAA;;;;;;;IDpMA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,IAAA,EAAA,GAAA,CAAA;;;;;;;;;;;;;IAaE,WAAW,CAAb,SAAuB,CAAvB,iBAAyC,GAAzC,UAAA,IAA0D,EAA1D,GAA+D,CAA/D;;;;;;;;;;;;;;;;;;;;;;;IAuBA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA,GAAA,CAAA;;;;;;;;;IASA,WAAA,CAPG,SAOH,CAAA,KAAA,GAAA,UAAA,KAAA,EAAA,WAAA,EAAA,GAAA,CAAA;;;;;;;;IAQA,WAVW,CAUX,SAAA,CAAA,MAAA,GAAA,UAAA,IAAA,EAAA,aAAA,EAAA,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;IAoBA,WAAA,CAAA,SAAA,CAnBG,iBAmBH,GAAA,UAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;IAwBA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAxByB,MAwBzB,EAAA;QACA,IAAM,CAAN,MAxBa,GAwBb,MAxBsB,CAAA;KA0BtB,CAAA;;;;;;;;IAQA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,KAAA,EAAA,MAAA,EAAA;QACA,OAAA,IAAA,CAAA,OAAA,CAAA,KA3BU,CA2BV,GAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA;YACM,IAAN,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,QAAA,CAAA,MA3BiD,CA2BjD;YACA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;IAQA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,KAAA,EAAA,MAAA,EAAA;;;;;;;;;;;;QAaA,IAAA,GAAA,IAAA,IAAA,CAAA,WAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,CAAA,EAAA;YACA,OAnCW,GAmCX,CAAA;SACA;;;;;;;CAOA,EAAA,CAAA,CAAA;;;;AAIA,IAAA,iBAAA,GAxCkB,OAwClB,IAAA,IAAA,WAAA,CAAA;;;;;IAOA,MAAA,EAAQ;QACR,SAAA,EAxCa,UAwCb,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,WAAA;QACA,SAAA,EAAA,UAAA,EAAA,UAAA;KAEA;IACA,OAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,CAAA;;;;;;AAMA,IAAA,kBAAA,GAAA,KAAA,CAAA,EAAA,EAAA,UAAA,CAAA,EAAA,EAAA,OAAA,MAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;IAMA,OAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EA9CG,KA8CH,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,CAAA;;;;;;;;;;;IAWA,OAlDG,KAkDH,CAlDG,KAkDH,CAAA,IAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA,EAAA,OAAA,aAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;CACA;;;;AAIA,IAAA,iBAAA,IAAA,UAAA,MAAA,EAAA;IACA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;;IAQA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAA,IAAA,EAAA;;;;;;;IAOA,iBAAA,CAAA,SAAA,CAAA,QAAA,GA1DkB,UA0DlB,IAAA,EAAA;;;;;;;IASA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAA,IAAA,EAAA;QAEI,OA1DO,IA0DX,CAAA,OAAA,EAAA,CAAA;KACG,CAAH;;;;;;QAMA,OAAA,IA9DG,CAAA,MAAA,EA8DH,CAAA;KACA,CAAA;;;;;;QAOA,IAAA,KAAA,GAjEG,IAiEH,CAjEG;QAkEC,IAAJ,iBAAA,EAAA;YACM,qBAjEoB,KAiE1B,GAAA,IAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,EAAA,EAAA,KAAA,EAAA,QAAA,EAAA,CAAA,CAAA;YACM,OAAN,KAjEY,CAAO,EAiEnB,EAjEoB,UAiEpB,CAAA,EAAA,EAAA,OAAA,KAAA,CAAA,8BAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA,IAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACA;QACA,OAjEW,mBAiEX,CAAA,QAAA,CAAA,CAAA;KACG,CAAH;;;;;;;;YA9DA,OAAA,KAAA,CAAA,EAAG,EAAH,UAAG,CAAH,EAAA,EAAA,OAAA,KAAA,CAAA,8BAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA,IAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SAuEA;;;;;;;IAQA,iBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,QAAA,EAAA;;;;;;QA/DA,OAAA,yBAAA,CAAA,QAAA,CAAA,CAAA;KAsEA,CAAA;;;;;;;;;SA3DA;QAqEI,OApEO,MAoEX,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CApEsB;KAqEnB,CAAH;;;;;;QD1QA,OAAA,CAAA,CAAA;KACA,CAAA;;;;;IAKA,iBAAiB,CAAjB,SAA0B,CAA1B,iBAA4C,GAA5C,UAAyD,IAAzD,EAAA;QACI,OAAJ,IAAA,CAAA,OAAA,CAAwB,IAAxB,CAAA,uBAAA,CAAA,IAAA,CAAwD,OAAxD,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;KACG,CAAH;;;;;IDEA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAA,IAAA,EAAA;QAFA,OAAA,IAAA,CAGQ,UAHR,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;;IAUA,iBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA;;;QAWA,IAPQ,KAOR,GAPQ,CAOR,IAAA,KAAA,GAAA,EAAA,IAAA,IAAA,GAAA,CAAA,EAAA;YAXA,OAAA,IAAmC,CAAnC;SAaA;QACA,qBAAA,MAAA,GAAA,IAAA,CAAA,uBAAA,CAAA,IAAA,EAAA,KAAA,EAAA,IAAA,CAAA,CAAA;;;;;SAJA;;KDuEA,CAAA;;;;IAEA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;QACA,OAAA,IAAA,IAAA,EAAA,CAAA;KACA,CAAA;;;;;;IAMA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAA,KAAA,EAAA,WAAA,EAAA;;;QAGA,qBAAA,SAAA,GAAA,OAAA,KAAA,IAAA,QAAA,GAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA;QACA,OAAA,KAAI,CAAJ,SAAA,CAAA,GAAA,IAAA,GAAA,IAAA,IAAA,CAAA,SAAA,CAAA,CAAA;KACA,CAAA;;;;;;IAMA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,IAAA,EAAA,aAAA,EAAA;QACA,IAAA,iBAAA,EAAA;YACA,qBAAA,GAAA,GAAA,IAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,EAAA,aAAA,CAAA,CAAA;YACA,OAAA,IAAA,CAAA,8BAAA,CAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;SACA;;;;;;;;;;KDjHA,CAAA;;;;;;IAEA,iBAAA,CAAA,SAAA,CAAqC,iBAArC,GAAA,UAAA,IAAA,EAAA,MAAA,EAAA;QAEU,qBAAV,OAAqC,GAArC,IAAA,CAAA,uBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,MAAA,EAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA;;;;;;;;;KAYA,CAAA;;;;;;;;;;;;;IAaA,iBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAA,IAAA,EAAA;;;;;;KAMA,CAAA;;;;;;;;IAQA,iBAAW,CAAX,SAAA,CAAA,uBAAA,GAAA,UAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA;QACA,qBAAA,MAAA,GAAA,IAAkC,IAAlC,CAAA,IAAA,EAAA,KAAA,EAAA,IAAA,CAAA,CAAA;;;QAGA,IAAA,IAAQ,IAAI,CAAC,IAAb,IAAA,GAAA,GAAA,EAAA;YACA,MAAA,CAAA,WAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,IAAA,CAAA,CAAA;SACA;;KAEA,CAAA;;;;;;IAOA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAA,CAAA,EAAA;;;;;;;;;;;;KAYA,CAAA;IACA,OAAA,iBAAA,CAAA;CACA,CAAA,WAAA,CAAA,CAAA,CAAA;;;;;KAKA;IACA,OAAA,EANS;QAOT,SAAA,EAAA,EAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,SAAA,EAAA,GAAA,EAAA,SAAA,EAAA;;;;;CAKA,CAAA;AACA,IAAA,gBAAA,IAAA,YAAA;IACA,SAAA,gBAAA,GAAA;;;;;IAKA,EAAA,IAAA,EAAAI,sBAAA,EAAA,IAAA,EAAA,CAAA;gBACA,SAAA,EAAA,CAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,CAAA;aACA,EAAA,EAAA;;;;;AAKA,gBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;AACA,IAAA,kBAAA,IAAA,YAZ8B;IAC9B,SAAA,kBAAA,GAAA;KAaG;;;;;;gBAMH,SAZG,EAYH,CAAA,EAAA,OAAA,EAAA,eAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,CAAA;aAXS,EAYT,EAAA;CACA,CAAA;;;;;;IAMA,SAAA,YAAA,GAAA;KACA;IACA,OAAA,YAAA,CAAA;;;;;;;;;oBALA,YAAA;oBAeA,aAAA;oBAbA,UAAA;oBAeA,cAAA;;;;;;;;;oBAPA,aAAA;;oBAkBA,cAAA;oBACA,iBAhB+B;;aAmB/B,EAAA,EAhBS;CAiBT,CAAA;;;;AAGA,YAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;;;QARA,IAAA,CAAA,MAAA,GAAA,MAAG,CAAH;QAmBI,IAAI,CAlBC,gBAkBT,GAAA,IAAA,CAAA;QACA,IAAA,CAAA,OAAA,GAAA,IAAAkB,oBAAA,EAAA,CAAA;;;;;;;;;;QAXA,IAAA,CAAA,KAAA,GAAA,IAAG,CAAA;QAuBC,OAAJ,IArBe,CAqBf;KArBA,CAAA;;;;;;;IAyBA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,KAAA,EAAA;QACI,IAAI,CArBC,gBAqBT,GArBwB,KAqBxB,CAAA;QACA,IAAA,CAAA,WAAA,GAAA,IAAA,CAAA,MAAA,CAAA,OAAA,EAAA,CAAA,KAAA,CAAA,CAAA;KAEA,CAAA;;;;;;;;;;gBDhLA,MAAA;YACA,KAAA,QAAoB;gBACV,IAAC,CAAI,qBAAf,EAAA,CAAA;gBACQ,MAAR;YACA,KAAA,IAAA;gBACA,IAAA,CAAA,kBAAiC,EAAjC,CAAA;gBACU,MAAV;YACA,KAAA,GAAY;gBACZ,IAAA,CAAA,iBAAA,EAAA,CAAA;gBACA,MAAA;YACA,KAAA,GAAA;;;gBDhBA,OAAA;;;;QAIA,KAAA,CAAA,cAAA,EAAA,CAAA;KAGA,CAAA;;;;;;;;;QAQA,UAAA,EAAA,IAAA;;;;;;;;QAgBA,GAAA,EAAA,YAAA;YAAA,OAAA,IAAA,CAAA,WAAA,CAAA;;;;KAQA,CAAA,CAAA;;;;;;;;;;;;IAYA,cAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;QACA,IAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;;;;;;IAMA,cAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;QACA,IAAM,CAAN,gBATuB,KASvB,IAAA,GAAA,IAAA,CAAA,kBAAA,EAAA,GAAA,IAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;;cAOA,IAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;IAMA,cAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAA,KAAA,EAAA;;KATA,CAAA;IAYA,MAXE,CAWF,cAAA,CAAA,cAAA,CAAA,SAAA,EAAA,QAAA,EAAA;;;;;;QAMA,GAAA,EAAA,YAAA;YACA,OAAA,IAAA,CAAA,OAAA,CAAA,YAAA,EAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;IAWA,cAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAA,KAAA,EAAA,KAAA,EAAA;QACA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAA,GAAA,IAAA,CAAA,MAAA,CAAA,OAAA,EAAA,CAAA,EAAA;;cD/GA,IAAA,CAAA,uBAAA,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA;;;;;;;;;;;;QAYA,IAAA,CAAA,gBAAA;YACA,CAAA,IAAA,CAAA,gBAAA,GAAA,KAAA,GAAA,KAAA,CAAA,MAAA,IAAA,KAAA,CAAA,MAAA,CAAA;;;;;;;SAOA;KACA,CAAA;;;;;;;;;IASA,cAAA,CAAA,SAAA,CAAA,uBAAA,GAAA,UAAA,KAAA,EAAA,KAAA,EAAA;;KDCA,CAAA;;;;;;;;;;IAUE,cAAF,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAA,KAAA,EAAA,aAAA,EAAA,KAAA,EAAA;QACA,IAAU,KAAV,KAAA,KAAA,CAAA,EAAA,EAAA,KAAA,GAAA,IAAA,CAAA,MAAA,CAAA,OAAA,EAAA,CAAA,EAAA;QACA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA;YAKA,OAAA;;;;;gBAKA,OAAA;;SAGA;QAFA,IAGQ,CAHR,aAAA,CAGmB,KAHnB,CAAA,CAAA;KACA,CAAA;IACA,OAAA,cAAA,CAAA;CACC,EAAD,CAAA,CAAA;;;;QAKA,OAAA,MAAA,KAAA,IAAA,IAAA,MAAE,CAAF,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA;KAGA;;;;;;;;IAkBA,0BAAA,CAAA,SAAA,CAAA,aATkD,GASlD,UAAA,KAAA,EAAA;QAoBA,IAAA,KAAA,GAAA,IAAA,CAAA;;YA5BA,IAAA,KAAA,CAAA,UAAA,EAAA;gBAUA,KATQ,CASR,UAAA,CAAA,iBAAA,EAAA,CAAA;aACA;YACA,MAAA,CAAA,SAAA,CAAA,aAAA,CAAA,IAAA,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA;YACA,IAAA,KAAA,CAAA,UAAA,EAAA;gBACA,KAAA,CAAA,UAAA,CAAA,eAAA,EAAA,CAAA;aACA;SACA,CAAA,CAAA;KACA,CAAA;IACA,OAAA,0BAAA,CAAA;;;;;;AAOA,IAAA,4BAAA,GAAA,CAAA,CAAA;AACA,IAAA,cAAA,IAAA,YAAA;;;;;QAuBA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;;;;QAEA,IAAA,CAAA,SAAA,GAAA,OAAA,CAAA;;;;QAIA,IAAA,CAAC,SAAD,GAAA,KAAA,CAAA;;;;;KAzBA;;;;IA+CA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;;KAzCA,CAAA;;;;;;;;QAMA,IAAA,IAAA,CAAA,KAAA,EAAA;YA+CA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,GAAA,SAAA,CAAA;;;;;;;IAeA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;QACA,IAAA,KArDK,GAqDL,IAAA,CAAA;QACA,OAAA,CAAA,OAAA,EAAA,CAAA,IAAA,CAAA,YAAA;;;;KAnDA,CAAA;;;;;;;;;;YAyMA,yBAAA,EAAA,CAtGuB,IAsGvB,CAAA,SAAA;SAxGA,CAAA;KACA,CAAA;IACA,OAAA,cAAA,CAAuB;;;;gBAzFvB,QAAA,EAAA,yKAAA;gBACA,MAAA,EAAA,CAAU,okBAAV,CAAA;gBACA,aAAA,EAA4BrB,+BAA5B,CAAA,IAAA;gBACA,QAAA,EAAA,gBAAA;;;;aAwEA,EAAA,EAAA;;;;;AAGA,cAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IAqGA,EAAA,IAAA,EAAIO,+BAAJ,GAAA;CACA,CAAA,EAAA,CAAA;AACA,cAAA,CAAA,cAAA,GAAA;IACA,UAAA,EAAA,CAAA,EAAW,IAAX,EAAAK,uBAAA,EAAA,IAAA,EAAA,CAAAQ,yBAAA,EAAA,EAAA,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAAR,uBAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;IACA,SAAA,EAAA,CAAA,EAAU,IAAV,EAAAF,6BAAA,EAAA,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,EAAA;IACA,aApGW,EAoGX,CAAA,EApGgB,IAoGhB,EAAAd,mBAAA,EAAA,EAAA;;;;;;;;CArGA;;;;;;;IAOA,OAAA,IAAA,KAAA,CAAA,eAAA,GAAA,IAAA,GAAA,2CAAA,CAAA,CAAA;CACA;;;;;;AAMA,SAAA,sCAAA,CAAA,KAAA,EAAA;;;;;;;;;;CAUA;;;;;IAKA,OAAA;IACA,MAAA;IACA,QAAM;IACN,OAAA;IACA,OAAA;IACA,OAAA;;;;;;;;;;IAUA,SAAA,aAvF6B,GAuF7B;;;;;IAKA,EAAA,IAAA,EAxFGQ,uBAwFH,EAAA,IAAA,EAxF2B,CAwF3B;;;;;;;AAOA,aA5FS,CA4FT,cA5FuB,GA4FvB,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;AAKA,IAAA,MAAA,IAAA,YAAA;IACA,SAAA,MAAA,GAAA;;QAEA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA;;;;;CAKA,EAAA,CAAA,CAAA;;;;;oBAKA,kBAAA,EAlG8C,MAkG9C;;;;aA3FG,EAmGH,EAAA;CACA,CAAA;;;;;AAKA,MAAA,CAAA,cAAA,GAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAAR,mBAAA,EAAA,EAAA;;;;;;;;;IA6BA,OAAA,gBAAA,CAAA;;;;gBAIA,QAAA,EAAA,qBAAA;;;;aAIA,EAAA,EAAA;;;;;;;;;;;;IAYA,OAAA,QAAA,CAAA;;;;;aA7GA,EAAA,EAAG;CAmHH,CAAA;;;;;;;;;;;IA3GG,OAAH,QAAA,CAAA;CAuHA,EAAA,CAAA,CAAA;AACA,QAAA,CAAA,UAAA,GAAA;;;;;;;;AAQA,QAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;AAGA,IAAA,gBAAA,IAAU,YAAV;;;;;;IAMA,SAAA,gBAAA,CAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA;QACA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAxHkB,CAwHlB;QACA,IAAA,CAAA,UAAA,GAAA,UAAA,CAAA;;;;QAIA,IAAA,CAAA,KAAA,GAAA,MAAA,CAAA;QACA,IAAA,CAAC,YAAD,GAAA,EAAA,CAAA;QACA,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA;;;;;QAKA,IAAO,CAAP,OAAA,GAAA,KAAA,CAAA;;;;QAtHA,IAAA,CAAA,kBAAO,GAAyD,IAAhEK,0BAAA,EAAA,CAAA;QA2HA,IAAA,CAAA,qBA1H6B,GA0H7B;YACA,MAAA;YACA,UA1HkB;YA2HlB,gBAAA;YAzHQ,OAAG;YA2HX,MAAA;YACA,MAAA;SAGA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,sBAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;KAqDA;;;;;;;YAgGA,OAAA,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA,UAAA,CAAA,QAAA,GAAA,IAAA,CAAA,SAvM+B,CAuM/B;SA1MA;;;;;;;SA8GA;;;;IAIA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,IAAA,EAAA;;;;;QA9IU,GAAV,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA;;;;;;;;;IAmJA,MAAA,CAAA,cA9KuB,CA8KvB,gBA9KoC,CAAK,SA8KzC,EAAA,aAAA,EAAA;;;;;QA7KG,GAkLH,EAAA,YAAA,EAAA,OAlL4B,IAkL5B,CAAA,YAlLgD,CAkLhD,EAAA;;;;;QA9KG,GAmLH,EAAA,UAAA,KAAA,EAAA;;;;;SAKA;QACI,UAAJ,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;;;;;;;;;KAoBA,CAAA,CAAA;;;;;;QAMI,GAAJ,EAjMS,YAiMT,EAAA,OAAA,IAAA,CAAA,KAAA,CAAA,EAAA;;;;;;;YAWA,IAAA,CAAA,aAAA,EAAA,CAAA;;;;;gBAKA,IAAA,CAAA,SAtMG,CAsMH,WAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA,MAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA;aArMS;SAuMT;;;;IA8BA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,OAAA,EAAA;;;;;QAMI,GAAJ,EA7MS,YA6MT,EA7MuB,OAAC,IA6MxB,CAAA,WAAA,CA7M+C,aA6M/C,CAAA,KAAA,CA7MkE,EAAG;;;;;;QAmNrE,UAAA,EAAA,IAAA;QACI,YAAJ,EAAA,IAAA;KACG,CAAH,CAAA;;;;;;YAMQ,OAAR,CAAA,IAAA,CAAA,aAAA,EAjNoC;iBAkNpC,IAAA,CAAA,KAAA,IAjNU,IAiNV,IAAA,IAAA,CAAA,KAAA,KAAA,EAAA,CAAA;;;;;;;QAOA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CApNsB,gBAAkB,CAAI,SAoN5C,EAAA,MAAA,EAAA;;;;;;QAMA,YAAA,EAAA,IAAA;;;;;;;;;;IAUA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA,EAAA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,EAAA,CAAA;;;;IAIA,gBAAA,CAAA,SAAA,CA1NU,OA0NV,GAAA,YAAA,EAAA,IAAA,CAAA,OA1N+B,GA0N/B,KA1NkD,CAAK,EA0NvD,CAAA;;;;;;;;;;;;;;;;;IAkBA,gBAAA,CAAA,SA5Nc,CAAa,aA4N3B,GAAA,YAAA;QACA,IAAM,sBAAN,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CA5NY,EAA4C;YA6NxD,MAAA,uCAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;SACA;;;;;IAvNG,gBAAH,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA,EAAA,OAAA,IAAA,CAAA,qBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA;;;;;;;;;;;IAuOA,gBAAA,CAAA,SAAA,CAAA,WA5NU,GAAoB,YA4N9B;QACA,qBAAA,aAAA,GAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA;QACA,OAAA,aAAA,GA5NyB,aAAe,CA4NxC,QAAA,CAAA,WAAA,EAAA,KAAA,UAAA,GAAA,KAAA,CAAA;KACA,CAAA;IACA,OAAA,gBAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,gBAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAG,uBAAA,EAAA,IAAA,EAAmB,CAAnB;gBACA,QAAA,EAAA,wEAAA;gBA5NA,IAAA,EAAA;oBA6NU,2BAAV,EAAA,MAAA;;;oBAGU,MAAV,EAAA,IAAA;oBACA,eAAA,EAAA,aAAA;oBACA,YAAA,EAAA,UAAA;oBACA,YAAA,EAAA,UAAA;oBACA,yBAAA,EAAA,yBAAA;;;;;;CAtNA,CAAA;;;;AAgOA,gBAAU,CAAV,cAAA,GA5NgB,YA4NhB,EA5N0C,OA4N1C;IACA,EAAA,IAAA,EAAMN,wBAAN,GAAA;IACA,EAAA,IAAA,EAAAC,uBA5Ne,GA4Nf;IAEA,EAAA,IAAA,EAAMmB,wBAAN,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAArB,sBAAA,EAAA,EAAA,EAAA,IAAA,EAAAsB,kBAAA,EAAA,EAAA,EAAA;CACA,CAAA,EAAA,CAAA;AACA,gBAAA,CAAA,cAAA,GAAA;IA5NA,UAAA,EAAA,CAAa,EAAb,IAAA,EAAkBvB,mBAAlB,EAAA,EAAA;IA6NA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAWA,mBA5NE,EA4Nb,EAAA;IACA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IAEA,UAAA,EAAU,CAAV,EAAA,IA5NW,EAAQA,mBA4NnB,EAAA,EAAA;IACA,MAAA,EAAA,CAAA,EAAA,IAAW,EAAXA,mBAAA,EAAA,EAAA;IACA,oBAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,oBAAA,EAAA,EAAA;CAEA,CAAA;;;;;;;;;;;IAWA,SAAA,gBAAA,CAAA,WAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,gBAAA,EAAA;;QA3NA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;QA6NA,IA5NQ,CA4NR,WAAA,GA5NmB,WA4NnB,CAAA;QACA,IAAA,CAAA,gBAAA,GAAA,gBAAA,CAAA;;;;QAIA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA;;;;QAIA,IAAA,CAAA,KAAA,GAAA,SAAA,CAAA;;;;;QAKA,IAAA,CAAA,UAAA,GAAA,EAAA,CAAA;;QAEA,IAAA,CAAA,YAAA,GAAA,gBAAA,GAAA,cAAA,EAAA,CAAA;QACA,IAAA,CAAA,iBAAA,GAAA,MAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,cAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,KAAA,CAAA,EAAA;;;;;QAKA,GAAA,EAAA,UAAA,KAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA,EAAA;;;;;;;;;QASA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,mBAAA,CAAA,EAAA;;;;;QAKA,GAAA,EAAA,UAAA,KAAA,EAAA;YACA,IAAA,CAAA,mBAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA;SACA;QACA,UA9Na,EAAG,IA8NhB;QACA,YAAA,EAAkB,IAAlB;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,oBAAA,EAAA;;;;;;QDvuBA,UAAA,EAAA,IAAA;;;IAGA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,sBAAA,EAAA;;;;;;;;;IASA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,WAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,UAAA,CAAA,EAAA;;;;;;;;;;;;IAoDA,MAAA,CAAA,cAAA,CAZoD,gBAYpD,CAAA,SAAA,EAAA,kBAAA,EAAA;;;;;QATsB,GAAtB,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,iBAAA,CAAA,EAAA;;;;;QAjCU,GAAV,EAAA,UAAU,KAAV,EAAA;;;;QASG,YAAH,EAAA,IAAA;;;;;;;;QAIA,IAAA,CAAA,aAEG,EAFH,CAAA;QAuBA,IAAA,CAAA,qBAAA,EAAA,CAAA;;;;;;;;;;;;;;IANA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;;;;KAwBA,CAAA;;;;;;;;;KAUA,CAAA;;;;;;;;;;IAUA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA,EAAA,IAAA,CAAA,aAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA;;;;;IAIA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;QAEI,qBAnBW,OAmBf,GAAA,IAnBsC,CAmBtC,aAAA,CAAA,UAAA,CAAA;QACA,qBAnBuB,SAmBvB,GAnBmC,OAAC,IAmBpC,OAAA,CAAA,OAAA,CAAA;QACA,qBAAA,SAAA,GAAA,OAAA,IAAA,OAAA,CAAA,OAAA,CAAA;QACA,qBAAA,WAAA,GAAA,CAAA,IAAA,CAAA,gBAAA,IAAA,IAAA,CAAA,gBAAA,CAAA,SAAA;aAjBS,IAmBT,CAAA,WAAA,IAAA,IAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CAAA;QACI,OAAJ,CAAA,EAAA,SAAA,KAnB2B,SAmB3B,IAAA,WAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;QAMA,OAAA,CAAA,IAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA,IAAA,IAAA,CAAA,aAAA,EAAA,IAAA,OAAA,GAAA,MAAA,CAAA;KACA,CAAA;;;;;;;;;SAWA;KACG,CAAH;;;;;;QAfG,IAqBH,CAAA,cArBG,EAqBH,CAAA;QACI,IAAJ,CAAA,oBAAA,EAAA,CACU;KAIP,CAAH;;;;;;IAMA,gBAAA,CAAA,SAAA,CAvBuB,cAuBvB,GAAA,YAvBkD;QAwBlD,IAAA,KAAA,GAAA,IAAA,CAAA;;;;;gBAKA,IAzBG,IAyBH,CAAA,KAAA,IAAA,OAAA,EAAA;oBACA,IAAA,WAAA,IAAA,KAAA,CAAA,SAAA,EAAA;wBAxBa,MAyBb,sCAAA,CAAA,OAAA,CAAA,CAAA;qBACA;oBACA,WAAA,GAAA,IAAA,CAAA;;;;;qBAKA;oBACA,SAAA,GAAA,IAAA,CAAA;iBACA;aACA,CAAA,CAAA;SACA;KACA,CAAA;;;;;;IAOA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;QACA,IAAA,IAAA,CAAA,aAAA,EAAA;;;;;;;;aAQA;iBACA,IAAA,IAAA,CAAA,UAAA,EAAA;gBACA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;IAoBA,EAAA,IAAA,EAAAsB,uBA3BG,EA2BH,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,yCAAA;gBACA,QAAA,EA3BsB,w/DA2BtB;gBACA,MAAA,EAAA,CAAA,uyGAAA,CAAA;;;;;4BAKAD,yBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,CAAA;4BACAD,2BAAA,CAAA,wCAAA,CAAA;yBACA,CAAA;qBACA,CAAA;iBACA;gBA9BA,IAAA,EAAA;;oBAgCA,cAAA,EAAA,MAAA;oBAEA,6BAAA,EA9BqC,MAAU;oBAgC/C,2BAAA,EAAA,iBAAA;oBACY,qBAAZ,EAAA,uBAAA;oBACA,sBAAA,EAAA,6BAAA;oBA5Bc,oBA8Bd,EAAA,2BAAA;oBACY,qBAAZ,EAAA,4BAAA;oBACU,kBAAV,EA9BgB,yBA8BhB;oBACA,kBAAA,EAAA,yBAAA;oBACA,oBAAA,EAAA,2BAAA;oBACA,oBAAA,EAAA,2BAAA;oBACA,SAAA,EAAA,eAAA;;;;;;;;;IASA,EAAA,IAAA,EAAQjB,wBAAR,GAAA;IACA,EAAA,IAAA,EAAMS,+BAjCgB,GAiCtB;IACA,EAAA,IAAA,EAAMO,qBAAN,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAjB,sBAAA,EAAA,EAAA,EAAA;IACA,EAAA,IAAA,EAAAgB,iCAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAhB,sBAAA,EAAA,EAAA,EAAA;CACA,CAAA,EAAA,CAAG;;;;;;;IA1BA,kBAAH,EAAA,CAAA,EAAA,IAAA,EAAAD,mBAAA,EAAA,EAAA;IAkCA,cAAA,EAAA,CAAA,EAAA,IAAA,EAAAgB,uBAAA,EAjCgC,IAiChC,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA;IACA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,0BAAA,EAAA,IAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA;IACA,mBAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,0BAAA,EAjC0C,IAAA,EAiC1C,CAAA,aAAA,EAAA,EAAA,EAAA;IACA,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,6BAAA,EAAA,IAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA;IACA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,6BAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,EAAA,EAAA;;;;;;;AAOA,IAAA,0BAAA,GAnC2B,EAmC3B,CAAA;;;;;;;;;;;IAxBG,WAAH,EAAAR,wBAAA,CAAA,YAAA,EAAA,OAAA,qBAAA,CAAA,EAAA,CAAA;IAoCA,KAAA,EAAA,IAAA;CAEA,CAAA;AAEA,IAAA,qBAnCU,IAmCV,YAAA;;;;;;;;;;;;IAcA,SAAA,qBAAA,CAAA,QAnCuB,EAmCvB,QAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,KAAA,EAAA,eAAA,EAAA,SAAA,EAAA;QACA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;QAEA,IAAA,CAAS,QAAT,GAAA,QAAA,CAAA;QAEA,IAAA,CAAS,iBAAT,GAAA,iBAAA,CAAA;QACA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;;;;;QAhCA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;QAsCI,IAAI,CAAR,UAAA,GAAA,KAAA,CAAA;;;;QAIA,IAAA,CAAA,4BAAA,GAAA,KAAA,CAAA;;;;;;;;QAQI,IAAI,CAxCC,UAwCT,GAAA,YAAA,GAxCiC,CAwCjC;KACG;;;;;;;;SAjCH;;;;;QA8CA,GAAA,EAAA,UAAA,YAAA,EAAA;YAEQ,IAAR,CAAA,YAAA,GAAA,YAAA,CAAA;SACA;;;;;;;IAOA,qBA1CU,CAAY,SA0CtB,CAAA,WAAA,GAAA,YAAA;QACA,IAAM,IAAI,CAAV,0BAAA,EAAA;YACA,IAAQ,CAAR,0BAAA,CAAA,WAAA,EAAA,CAAA;SACA;QACA,IAAA,CAAA,aAAA,EAAA,CAAA;KACG,CAAH;;;;;QAKI,GAAJ,EA5CS,YA4CT;YACQ,OAAR,IAAA,CA5CU,UA4CV,IAAA,IAAA,CAAA,YAAA,CAAA,SAAA,CAAA;SACA;;;;;;;;IAQA,qBAAA,CAAA,SAAA,CAAA,SA9CyC,GA8CzC,YA9CoD;QA+ChD,IAAJ,CAAA,IAAA,CAAA,WAAA,EAAA;YACA,IAAA,CAAA,cAAA,EAAA,CAAA;SACA;;;;YA5CA,IAAA,CAAA,WAAA,CAAA,UAAA,EAAA,CAAA;SAiDA;QAGA,IAAA,CAAS,IAAT,CAAA,WAAA,CAAA,WAAA,EA/Cc,EAAQ;YAkDd,IAAR,CAAA,WAAA,CAAA,MAAA,CAAA,IAhDU,CAA2B,OAgDrC,CAAA,CAAA;YACA,IAAA,CAAA,0BAAA,EAAA,CAAA;SACA;;;;;;;;;IASA,qBAAA,CAAA,SAAA,CAAA,UAAA,GAjD2C,YAiD3C;QACA,IAAA,IAAA,CAAA,WAAA,IAAA,IAAA,CAAA,WAAA,CAAA,WAAA,EAAA,EAAA;YACA,IAAA,CAAA,WAAA,CAAA,MAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;QAjCA,YAAA,EAAA,IAAA;KAsDA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,qBAAA,CAAA,SArDqD,EAqDrD,kBAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA;YACA,OAAAO,0BAAA,CAAA,KAAA,CAAA,KAAA,CAAAA,0BAAA,EAAA,IAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,MAAA,EAAA,EAAA,OAAA,MAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,CAAA;SACA;QACA,UAAA,EAAI,IAAJ;QACA,YAAI,EAAJ,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,qBAAA,CAAA,SAAA,EAAA,cAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA;YACA,IAAA,IAAI,CAAJ,YAAA,CAAA,WAAA,EAAA;gBACA,QAAA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,UAAA,EAAA;aACA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YAAA;YACO,IAAP,KAAA,GAAA,IAAA,CAAwB;YACjB,IAAP,IAAA,CAAA,SAAA,EAAA;gBACA,OAAAA,0BAAA,CAAA,SAAA,CAAA,IAA2C,CAA3C,SAAA,EAAA,OAAA,CAAA,CAAA,MAAA,CAAA,UAAA,KAAA,EAAA;oBACA,qBAAA,WAAA,IAAA,KAAA,CAAA,MAAA,CAAA,CAAA;oBACA,qBAAA,cAAA,GAAA,KAA0D,CAA1D,eAA2E;wBAC3E,KAAA,CAAA,eAAA,CAAA,WAAA,CAAqD,aAArD,GAAA,IAAyE,CAAC;oBAC1E,OAAA,KAAA,CAAA,UAAA;wBAtDA,WAAA,KAAA,KAAA,CAAA,QAAA,CAAA,aAAA;yBAwDA,CAAA,cAvDgC,IAuDhC,CAAA,cAvDwC,CAuDxC,QAAA,CAAA,WAAA,CAAA,CAAA;wBAtDoB,CAAA,KAuDpB,CAvDuB,WAuDvB,CAAA,cAAA,CAAA,QAvD6D,CAuD7D,WAAA,CAAA,CAAA;iBACA,CAAA,CAAA;;SDheA;;QAEA,YAAA,EAAA,IAAA;KADA,CAEE,CAFF;;;;;;;;;QASA,IAAA,KAAA,GAAA,IAAA,CAAA;;KDdA,CAAA;;;;;;;;;IAyCA,qBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAA,EAAA,EAAA;;;;;;;;;;;IAzBA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,EAAA,EAAA;QACI,IAAI,CADC,UACT,GADU,EAAa,CAAE;KAEtB,CAAH;;;;;IAKA,qBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,KAAA,EAAA;;;;;SAKA;aAJS;YAMD,qBAAR,gBAAA,GAAA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,UAAA,CAAA;YACA,qBAAA,YAAA,GAAA,KAAA,CAAA,OAAA,KAAA,QAAA,IAAA,KAAA,CAAA,OAAA,KAAA,UAAA,CAAA;;;;;YAKA,OAAA,CAAA,OAAA,EAAA,CANoC,IAMpC,CAAA,YAAA;;;;;SAKA;;;;;;;;;;QALG,IAeH,QAAA,CAAA,aAAA,KAfyC,KAezC,CAAA,MAAA,EAAA;;;;;;;;;;;IAoBA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;;;;;KAKA,CAAA;;;;;IAMA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;QACA,IAAA,IAAA,CAAA,4BAAA,EAAA;;;;KAIA,CAAA;;;;;;;;;;QAlBA,qBAAA,YAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,YAAA,GAAA,yBAAA,GAAA,0BAAA,CAAA,CAAA;QA6BI,IAAJ,CAAA,YAAA,CAAA,aA5BU,CA4BV,YAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;;aAlBA,SAAA,CAAA,YAAA;YA6BA,KAAA,CAAA,WA5BQ,EA4BR,CAAA;;SAGA,CAAA;aACA,KAAA,EAAA;;;;;;;IAQA,qBAAA,CAAA,SA5ByB,CA4BzB,aAAA,GAAA,YAAA;QACI,IAAJ,IAAA,CAAA,WA5BwB,EA4BxB;YACA,IAAA,CAAA,UA5BmB,EA4BnB,CAAA;YACA,IAAA,CAAA,WA5BwB,CA4BxB,OAAA,EAAA,CAAA;YAEA,IAAY,CA5BC,WAAW,GA4BxB,IAAA,CAAA;SACA;KACA,CAAA;;;;;;;;;;;;;;;;;QAZA,IAAA,KAAA,IAAA,KAAA,CAAA,MAAA,EAAA;YACQ,IA8BR,CAAA,4BAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;YACA,IAAE,CAAF,gBAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;YACA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;SACA;QACA,IAAA,CAAA,UAAA,EAAA,CAAA;KACA,CAAA;;;;;;;QAzBA,IAAA,CAAA,YAAA,CAAA,OAAC,CAAD,OAAA,CAAC,UAAD,MAAA,EAAA;YAiCO,IAAP,MAAiB,IAAjB,IAAA,IAAA,MAAA,CAAA,QAAA,EAAA;gBACA,MAAA,CAAA,QAAA,EAAA,CAAA;aA/BA;SAiCA,CAAA,CAAA;KACA,CAAA;;;;;QDxJA,IAAA,CAAA,OAAA,GAAA,IAAA,cAAA,CAAA,IAAA,CAAA,YAAA,CAAA,QAAA,EAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;;KAGA,CAAA;;;;IACA,qBAAA,CAAU,SAAV,CAAA,iBAAA,GAAA,YAAA;QACA,qBAAA,YAAA,GAAA,IAAA,YAAA,EAAA,CAAA;QACA,YAAI,CAAJ,gBAAA,GAAA,IAAA,CAAA,mBAAA,EAAA,CAAA;QACA,YAAI,CAAJ,KAAA,GAAA,IAAiB,CAAjB,aAAA,EAAA,CAAA;QACA,YAAI,CAAJ,SAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;QACA,YAAI,CAAJ,cAAA,GAAA,IAAA,wBAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;QACA,OAAA,YAAA,CAAA;KACA,CAAA;;;;IAIA,qBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;QACA,IAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CAAA,WAAA,CAAA,IAAA,CAAA,QAAA,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,KAAA,EAAA,CAAA;aACA,oBAAA,CAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,EAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,CAAA,CAAA;QACA,IAAA,CAAA,2BAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;QACA,OAAA,IAAA,CAAI,iBAAJ,CAAA;KACA,CAAA;;;;;;;IAOA,qBAAA,CAAA,SAAA,CAAA,2BAAA,GAAA,UAAA,QAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;;;;KAKA,CAAA;;;;;;;;;;;;;QDhBA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA;KAZA,CAAA;;;;;;IAGA,qBANqB,CAMrB,SAAA,CAN4B,WAAe,GAM3C,YAAA;;;;;IAKA,OAAA,qBAAA,CAAA;CAKA,EAAA,CAAA,CAAG;AACH,qBAAA,CAAA,UAAA,GAAA;;gBDNA,QAAA,EAAA,+CAAA;;;;oBAIA,mBAAA,EAAA,MAAA;;;;oBAIA,kBAAA,EAAA,kBAAA;;;;oBAIA,WAAA,EAAA,wBAAA;;;;CAIA,CAAA;;;;;IAKA,EAAC,IAAD,EAAAX,wBAAA,GAAA;IACE,EAAF,IAAA,EAAA,OAAA,GAAA;IACE,EAAF,IAAA,EAAAU,8BAA0B,GAA1B;IACE,EAAF,IAAA,EAAAD,+BAAA,GAAA;IACA,EAAA,IAAA,EAAA,gBAAA,GAAA;;;;IAIA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAV,sBAAA,EAAA,EAAA,EAAA,IAAA,EAAAQ,oBAAA,EAAA,IAAA,EAAA,CAAAC,iCAAA,EAAA,EAAA,EAAA,EAAA;CASC,CAAD,EAAA,CAAA;AAEA,qBAAA,CAAA,cAAA,GAAA;IAFA,cAAA,EAAA,CAAA,EAAA,IAAA,EAAAV,mBAAA,EAAA,IAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA;IAgBA,kBAAA,EAfa,CAeb,EAfkC,IAelC,EAAAA,mBAAA,EAfkC,IAelC,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA;;;;;IAKA,OAAA,oBAAA,CAAA;;;;;;;aA4VA,EAAA,EAAA;CAIA,CAAA;;;;AAvWA,oBAAU,CAAV,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;AA6CA,IAAA,kBAAA,IAAA,YAAA;;;;IAgHA,SAAA,kBAAA,CAAA,WAAA,EAAA;;;;;;;;QAQA,GAAA,EAAA,YAhEI,EAgEJ,OAAA,IAAA,CAhEI,QAgEJ,CAAA,EAAA;;;;;QA7CU,GAAV,EAAA,UAAA,KAAA,EAAA;;;;;QA0EA,YAAA,EAAA,IApEG;;;;;;;;;;;;;YA8GH,IAAA,CAAA,QAAG,GAAH,KAAA,CAAA;;;;QAGG,YAAH,EAAA,IAAA;KAEA,CAAA,CAAA;;;;;;;;;;;QAyHI,GAAJ,EAAS,UAAT,KAAA,EAAA,EAAA,IAAA,CAAA,OAAwC,GAAxC,KAAA,CAAA,EAAA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;;;;;QAvWG,YAoBH,EAAA,IAAA;KACA,CAAA,CAAA;;;;;;QAlBG,qBAwBH,SAAA,GAAA,IAAA,CAAA,OAAA,IAAA,IAAA,CAAA,iBAAA;YACQ,IAAR,CAxBU,OAwBV,GAAA,IAAA,CAAA,iBAxB6C,GAwB7C,IAAA,GAAA,IAAA,CAAA;QACI,IAAI,SAxBE,EAwBV;YACA,IAAA,CAAA,iBAAA,CAAA,WAAA,EAAA,SAAA,CAAA,CAAA;;;;;;;IAQA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;;;;;SAKA;KACA,CAAA;;;;IAKA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;QACI,IAAI,CA7BC,wBA6BT,EAAA,CAAA;QACA,IAAA,CAAA,kBAAA,EAAA,CAAA;;;;;;;;;;QAvBG,QAkCH,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,KAAA,CAAA;KACA,CAAA;;;;;;;;;IAWA,kBAAA,CAnC8B,SAmC9B,CAAA,wBAAA,GAAA,YAAA;;;;;;;;;;QA7BG,aAwCH,CAAA,KAAA,CAAA,MAxCyC,GAwCzC,MAAA,CAAA;;;;;QAvCG,QA4CH,CAAA,UAAA,CAAA,WA5CqC,CA4CrC,aAAA,CAAA,CA5C2C;;;;;;KAkD3C,CAAA;;;;;IAKA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;QACI,qBAAJ,QAAA,IAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA,CAAA;;QAEA,QAAA,CAAA,KAAA,CAAA,MAAA,GAAA,MAAA,CAAA;;QACA,QAAU,CA/CC,KA+CX,CAAA,MAAA,GAAA,QAAA,CAAA,YA/C2B,GA+C3B,IAAA,CAAA;KACA,CAAA;IA/CA,OAAA,kBAAA,CAAA;CAgDA,EAAA,CAAA,CAAA;AACA,kBAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAQ,uBAAA,EAAA,IAAA,EAAA,CAAA;;;;;oBAMA,SAAA,EAhDG,sBAgDH;;;;;;;;;;AAUA,kBAAA,CAAA,cAAA,GAAA;;IAEA,SAAA,EAAA,CArDS,EAqDT,IAAA,EAAAR,mBAAA,EAAA,EAAA;IACA,mBAAA,EArDmB,CAqDnB,EAAA,IAAA,EArDyBA,mBAqDzB,EAAA,EAAA;IACA,mBAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;CACA,CAAA;AACA,IAAA,aAAA,IAAA,YAAA;;;;;AAKA,aAzDG,CAAA,UAyDH,GAAA;IACA,EAAA,IAAA,EAAQO,sBAAR,EAzDkB,IAyDlB,EAAA,CAAA;gBACA,YAzDoB,EAyDpB;oBACA,gBAAA;;;;;oBAMA,QA1D0B;;;;;oBA+D1BV,4BAAA;;;;;oBAlDG,gBAkEH;;;;oBAIA,aAAA;oBACA,QAAA;oBACA,QAAA;oBAhEgB,kBAkEhB;iBACA;;;;;;;;;;;;;;IA6BA,QAAA,UAAA,MAnEiB,EAmEjB;QACA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;;;;;YAKA,IAAA,IAAA,GAAA,EAAA,CAAA;YACA,KAAA,IAAA,EAAA,GAAA,CApEiB,EAoEjB,EAAA,GApE8B,SAoE9B,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;gBACA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;;;;QA9DG,MAoEH,CAAA,cAAA,CAAA,OAAA,CAAA,SAAA,EAAA,UAAA,EAAA;;;;YAIQ,GAAR,EApEa,YAoEb,EAAA,OApEkC,IAoElC,CAAA,SAAA,CAAA,EAAA;;;;;;;;;QA7DG,OAsEH,OAAA,CAAA;KACA,CAAA,IAAA,CAAA,EAAA;CACA;;;;;;;;;AASA,IAAA,kBAAA,GAAA,CAAA,CAAA;;;;AAIA,IAAA,6BAAA,GAAA,CAxEmB,CAwEnB;;;;;;;;;;;IAWA,WAAA,EAAAS,wBAAA,CAAA,YAAA,EA1EqB,OA0ErB,QAAA,CA1EiC,EA0EjC,CAAA;IACA,KAAA,EAAA,IAAA;CACA,CAAA;;;;;;;;CAQA,EAAA,CAAA,CAAA;AACA,IAAA,YAAA,IAAA,YAAA;IACA,SAAA,YAAA,GAAA;KACA;;;;;;;;;IASA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;IAQA,SAAA,QAAA,CAAA,QAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,IAAA,EAAA;QAEI,IAAJ,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA;QACA,KAAA,CAAA,WAAA,GAAA,WAAA,CAAA;;;;QA1EG,KA8EH,CAAA,IAAA,GAAA,GAAA,CAAA;QACI,KAAJ,CAAA,IAAA,GAAA,CAAA,CAAA;;;QAGI,KAAJ,CAAA,aAAA,GAAA,CAAA,CAAA;QAEI,KAAJ,CAAA,MAAA,GAAA,IAAA,CAAA;QACI,KAAJ,CAAA,SAAA,GAAA,KAAA,CAAA;QACA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA;;;;;;;;QAlDG,KAmFH,CAAA,KAAA,GAAA,IAnFGD,0BAmFH,EAAA,CAAA;;;;;;;;;;;;;;;QA8BA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAA;;;;QAIA,KAAA,CAAA,oBAAA,GAAA,CAAA,CAAA;;;;;;;;QASA,KAAA,CAAA,iBAAA,GAAA,IAAA,CAAA;;;;;QAKA,KAnGG,CAmGH,gBAAA,GAAA,IAAA,CAAA;;;;QAKI,KAnGK,CAmGT,eAAA,GAnG4B,IAmG5B,CAAA;QACI,KAnGK,CAmGT,mBAnG4B,CAAE,OAmG9B,CAAA,KAAA,CAAA,WAAA,CAAA,aAAA,EAAA,QAAA,EAAA,IAAA,CAAA;aAlGS,SAmGT,CAAA,UAAA,MAAA,EAnGoC,EAAE,OAmGtC,KAAA,CAnG6C,SAmG7C,GAAA,CAAA,CAAA,MAnGsE,IAmGtE,MAAA,KAAA,UAAA,CAAA,EAAA,CAAA,CAAA;;QAGI,OAAJ,KAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,QAAA,EAAA;;;;;QAKA,GAAA,EAtGG,YAsGH,EAAA,OAAA,IAAA,CAAA,OAAA,CAAA,EAAA;;;;;QAMI,GAAJ,EAAS,UAAT,KAtGW,EAAc,EAsGzB,IAAA,CAAA,OAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA,EAAA;QACI,UAAJ,EAAA,IAAA;;KAGA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,KAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA;YACQ,OAAR,IAAA,CAAA,IAAA,CAAA;SACA;;;;;QAOI,GAAJ,EAzGS,UAAC,CAyGV,EAzGsB;YA0Gd,IAAR,CAAA,IAAA,GAAA,oBAAA,CAAA,CAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA;YACQ,IAAR,CAAA,QAAA,GAAA,IAAA,CAAA,oBAAA,CAAA,IAAA,CAzGsD,MAyGtD,CAAA,CAzGyD;SA0GzD;;;;IAIA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,KAAA,EAAA;;;;;;;SAOA;;;;;QAKA,GAAA,EAAA,UAAA,CAAA,EAAA;;;;gBAIA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA;aA9GS;YAgHT,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;;;;;IAKA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,MAAA,EAAA;;;;;QAIA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,KAAA,CAAA,EAAA;;;;;QAKA,GAAA,EAAA,UAAA,CAAA,EAAA;YACM,IAAN,CAlHW,KAkHX,GAAA,oBAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA;YACA,IAAQ,IAAI,CAlHC,KAAC,GAAO,CAkHrB,KAAA,CAAA,EAlH8B;gBAmHtB,IAAR,CAAA,aAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAA;aACA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;;;;;;QAYA,GAAA,EAAA,UAAA,KAAA,EAAA,EAAA,IAAA,CAAA,WAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA,EAAA;QACA,UAAA,EAAA,IAAA;;KAEA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,uBAAA,EAAA;;;;;;;;;;QAWI,GAAJ,EAAS,UAAT,KAlHW,EAAc,EAkHzB,IAAA,CAAA,WAAA,GAAA,KAAA,CAAA,EAAA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;;;;QAcI,GAAJ,EAvHS,UAuHT,KAvHU,EAAe;YAwHjB,IAAR,KAAA,KAAA,MAvHU,EAAmB;gBAwH7B,IAAA,CAAA,aAAA,GAAA,MAAA,CAAA;;;;;;gBApHA,IAAA,CAAA,aAAA,GAAA,CAAA,CAAA;aACS;SA2HT;QACA,UAAA,EAAA,IAAA;QAEI,YAAJ,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SA1HuB,EA0HvB,yBA1H+C,EAAK;;;;;QAgIpD,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,YAAA,CAAA,EAAA;;;;;;QAOI,UA1HM,EA0HV,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YAAA;;YAEM,IAAI,IAAV,CAAA,MAAA,KAAA,IAAA,EAAA;gBACU,IAAV,CAAA,KAAA,GA5HuB,IA4HvB,CA5HwB,IA4HxB,CAAA;aACA;YACA,OAAA,IAAA,CAAA,MAAA,CAAA;;;;;;QAMI,GAAJ,EAAA,UAAA,CAAA,EA9HsB;YA+HhB,IAAN,CAAA,MAAA,GAAA,oBA9HuB,CA8HvB,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,CAAA;YACM,IAAI,CA9HC,QA8HX,GAAA,IA9HY,CA8HZ,oBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,SAAA,CAAA,EAAA;;;;;QAMA,GAAA,EAAA,UAAA,KAAA,EAAA,EAAA,IAAA,CAAA,SAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA,EAAA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;IAhIA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,cAAA,EAAA;;;;;;;;;YAMA,IAAA,IAAA,CAAA,aAAA,IAAA,IAAA,CAAA,KAAA,GAAA,CAAA,KAAA,CAAA,EAAA;gBAoIA,OAAA,IAAA,CAAA,KAAA,CAnIQ,OAAY,CAmIpB,IAAA,CAAA,aAAA,CAAA,CAAA;aAES;YACT,OAnIW,IAmIX,CAAA,KAAA,CAAA;SAEA;QACA,UAAA,EAAA,IAAA;;;;;;;;QAQA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,EAAA;;;;;;;;;;;;;;;;QA9HA,YAAA,EAAA,IAAA;KA+IA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,aAAA,EAAA;;;;;;YAMA,OAAA,IAAA,CAAA,OAAA,KAAA,CAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;;;QASA,GAAA,EAAA,YAAA;;;;;;;YAOA,OAAA,CAAA,CA9IG;SA+IH;QACA,UAAA,EAAA,IAAA;;;;;;;;QAQI,GAAJ,EA9IS,YA8IT;YACA,qBAAA,IAAA,GAAA,IAAA,CAAA,QAAA,GAAA,GAAA,GAAA,GAAA,CAAA;;YA7IA,OAAO;gBA+IP,WA9ImB,EAAM,WA8IzB,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,GAAA,IAAA,CAAA,SAAA,GAAA,WAAA,GAAA,IAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,GAAA,GAAA;aACA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAM,EAAN,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,kBAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA;YACA,qBAAA,IAAA,GAAA,IAAA,CAAA,QAAA,GAAA,GAAA,GAAA,GAAA,CAAA;YACA,qBAAA,IAAA,GAAA,IAAA,CAAA,kBAAA,GAAA,EAAA,GAAA,GAAA,CAAA;YACA,OAAA;gBACA,WAAA,EAAA,WAAA,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,GAAA,IAAA,CAAA,SAAA,GAAA,WAAA,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,CAAA,OAAA,GAAA,GAAA;aACA,CAAA;SACA;QACA,UAAA,EAAI,IAAJ;QACA,YAAI,EAAJ,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,uBAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA;YACA,qBAAA,IAAA,GAAA,IAAA,CAAA,QAAA,GAAA,GAAA,GAAA,GAAA,CAAA;;;YAGA,qBAAA,IAAA,GAAA,CAAA,IAAA,CAAA,QAAA,IAAA,IAAA,CAAA,UAAA,IAAA,KAAA,GAAA,EAAA,GAAA,GAAA,CAAA;YACA,qBAAA,MAAA,GAAA,IAAA,CAAA,oBAAA,GAAA,CAAA,GAAA,GAAA,CAAA;YACA,OAAA;gBACA,WAAA,EAAA,WAAA,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,GAAA,MAAA,GAAA,IAAA;aACA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YAAA;YACO,qBAAP,QAAA,GAAA,IAAA,CAAA,oBAAA,GAAA,GAAA,CAAA;YACA,qBAAA,cAAA,GAAA,IAAA,CAAA,QAAA,GAAA,MAAA,GAAA,QAAA,GAAA,GAAA,GAAA,QAAA,GAAA,OAAA,CAAA;YACA,qBAAA,IAAA,GAAA,IAAA,CAAA,QAAA,GAAA,GAAA,GAAA,GAAA,CAAA;;;;YA5IO,qBAgJP,IAAA,GAAA,CAAA,IAAA,CAAA,QAAA,IAAA,IAAA,CAAA,UAAA,IAAA,KAAA,GAAA,GAAA,GAAA,EAAA,CAAA;YACA,qBAAA,MAAA,GAAA,CAAA,IAAA,CAAA,QAAA,IAAA,IAAA,CAAA,UAAA,IAAA,KAAA,GAAA,iBAAA,GAAA,EAAA,CAAA;YACA,qBAAA,MAAA,GAAA;gBACA,gBAAA,EAhJ6B,cAgJ7B;;gBAEA,WAhJmB,EAAM,yBAgJzB,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,GAAA,QAAA,GAAA,CAAA,GAAA,IAAA,GAAA,MAAA;aACA,CAAA;YACA,IAhJY,IAAA,CAgJZ,WAAA,IAAA,IAAA,CAAA,SAAA,EAAA;gBACA,qBAAA,IAAA,GAAA,IAAA,CAAA,QAAA;qBACA,IAAA,CAAA,WAAA,GAAA,QAAA,GAAA,KAAA;qBACA,IAAA,CAAA,WAAA,GAAA,OAAA,GAAA,MAAA,CAAA,CAAA;gBACA,MAAA,CAAA,SAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;gBAsHA,WAAA,EAAA,WAAA,GAAA,IAAA,GAAA,IAAA,GAAA,MAAA,GAAA,IAAA;aACA,CAAA;SACA;;;;;;;;;;;YDt5BA,OAAA,CAAA,IAAA,CAAA,UAAA,IAAA,KAAA,IAAA,CAAA,IAAA,CAAA,QAAA,IAAA,CAAA,IAAA,CAAA,WAAA,GAAA,IAAA,CAAA,WAAA,CAAA;;QAGA,UAAA,EAAA,IAAA;QAFA,YAGQ,EAAU,IAAA;KAFlB,CAAA,CAAA;IACA,MAAA,CAAA,cAGW,CAAA,QAAE,CAHb,SAAA,EAAA,YAAA,EAAA;;;;;;;;QASA,UAAA,EAAA,IAAA;;KDmBA,CAAA,CAAA;;;;;;;;;;;;;SAaA;;;;;;;;;;;;;;;;;;;;KAsJA,CAAA;;;;;IArDA,QAAA,CAAA,SAAA,CAAY,QAAS,GAArB,UAAA,KAAA,EAAA;QACY,IAAZ,IAAA,CAAA,QAAY,EAAZ;YACA,OAAA;SACA;;QAzFU,KAAV,CAAA,cAAA,EAA+B,CAAM;;;;KAqDrC,CAAA;;;;;;;YAkGQ,OAAR;SACA;;QAEA,IAAA,CAAA,aAAA,EAAA,CAAA;QACA,KAAA,CAAA,cAAA,EAAA,CAAA;;;;;;;;;;QAtJG,IAOH,CAAA,mBAAA,EAAA,CAAA;KACA,CAAA;;;;IAKA,QAAM,CAAN,SAAA,CAAA,QAAA,GAAA,YAAA;;;QAGA,IAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,SAAA,CAAA,mBAAA,EAAA,CAAA;QACA,IAAA,CAAA,0BAAA,EAAA,CAAA;;;;;IAKA,QAAA,CAAA,SAAA,CAAA,OAAA,GARwC,YAAW;;;;;;;;QAiB/C,IAAI,IAZC,CAAI,QAYb,EAAA;YACM,OAAN;SACK;QACL,QAAA,KAAA,CAAA,OAAA;;;;;gBAKA,IAAA,CAAA,UAAA,CAb+C,CAa/C,EAAA,CAAA,CAAA;;;;;YAKA,KAAA,IAAA;;;;;;;;;;;gBAoBA,IAAA,CAxBU,UAwBV,CAAA,IAAA,CAAA,UAAA,IAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;gBAvBS,MAwBT;YACM,KAxBK,QAwBX;gBACA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;gBACA,MAAA;;;;;YAKA,KAAA,UAAA;;;;;;;;;QApBG,KA6BH,CAAA,cAAA,EAAA,CA7B6B;;;;;IAkC7B,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;;;;;;;;QA5BG,IAqCH,CAAA,KAAA,GArCG,IAqCH,CArCwB,MAqCxB,CAAA,IAAA,CAAA,KArCwC,GAAG,IAqC3C,CAAA,IAAA,GAAA,QAAA,EAAA,IAAA,CAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA;;;;;;;;;IASA,QAAA,CAAA,SAzCG,CAyCH,wBAAA,GAAA,UAAA,GAAA,EAAA;;;;QArCG,qBAyCH,MAAA,GAzCoC,IAyCpC,CAAA,QAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,GAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA;;;;;QAxCG,IA6CH,IAAA,CAAA,kBAAA,EAAA;;;;;;;;;KASA,CAAA;;;;;IAgCA,QAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;QACI,IAAI,IA1DC,CAAI,KA0Db,IAAA,IAAA,CAAA,gBAAA,EAAA;YACM,qBAAN,KAAA,GAAA,IAAA,CAAA,kBAAA,EAAA,CAAA;YACA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,KAAA,CAAA;YACA,IAAA,CAAA,6BAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;IAtDA,QAAoE,CAApE,SAAA,CAAA,eAAA,GAAA,YAAA;QAAA,IAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,eAAA,EAAA;YA+DQ,qBAAR,KAAA,GAAA,IAAA,CAAA,kBAAA,EAAA,CAAA;YACM,IAAI,CA7DC,eA6DX,GAAA,IAAA,CAAA,KAAA,CAAA;YACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;SAEA;KACA,CAAA;;;;;;;YAOA,OAAA;SACA;QACA,IAAM,IAAI,CAhEC,YAgEX,IAhEY,MAAqB,EAgEjC;YACA,qBAAA,SAAA,GAAA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,KAAA,CAAA;YACA,qBAAA,aAAA,GAAA,SAAA,GAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;;;;;aAKA;YACQ,IAAR,CAAA,oBAAA,GAlEoC,IAAC,CAkErC,YAAA,GAlEuD,IAkEvD,CAAA,IAAA,IAAA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;SACA;;;;;;;IAOA,QAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAA,KAAA,EAAA;;;;;QAjEA,OAAA,KAAA,CAAA;KAuEA,CAAA;;;;;;IAOA,QAAM,CAAN,SAAA,CAAA,oBAAA,GAAA,UAAA,KAAA,EAAA;QACA,OAAA,CAAQ,KAtEK,GAsEb,IAAA,CAAA,GAAA,KAAA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;KACA,CAAA;;;;;;;QAjEA,OAAA,IAAA,CAAA,GAAA,GAAA,UAAA,IAAA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;KAyEA,CAAA;;;;;;;;IASA,QAAM,CAAN,SAxEW,CAAM,MAwEjB,GAAA,UAAA,KAxEkB,EAwElB,GAAA,EAAA,GAAA,EAAA;QACA,IAAA,GAAA,KAAc,KAAd,CAAA,EAAA,EAAA,GAAA,GAAA,CAxEgB,CAwEhB,EAAA;QACA,IAAA,GAAA,KAAY,KAxEE,CAAI,EAAE,EAwEpB,GAAA,GAAA,CAAA,CAAA,EAAA;QACA,OAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;IAQA,QAAQ,CAxEC,SAwET,CAAA,UAAA,GAAA,UAAA,KAAA,EAAA;QACA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;;;;;;;;IAQA,QAAQ,CA1EC,SA0ET,CAAA,gBAAA,GAAA,UAAA,EAAA,EAAA;QACA,IAAA,CAAA,6BAAA,GAAA,EAAA,CAAA;;;;;;;;IAQA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,EAAA,EAAA;QAEI,IAAJ,CAAA,SAAA,GAAA,EAAA,CAAA;KACA,CAAA;;;;;;;IAQA,QAAQ,CAAR,SAAA,CAAA,gBAAA,GA5EqC,UA4ErC,UAAA,EAAA;QACA,IAAM,CAAN,QA5Ea,GA4Eb,UAAA,CA5EuB;KA6EvB,CAAA;IAEA,OAAA,QAAA,CAAA;CA3BA,CAAA,kBAAA,CAAA,CAAA,CAAA;;;;;oBAiCA,SAAA,EAAA,YAAA;oBACA,QAAA,EAAA,WAAA;oBACA,SA9Ee,EAAS,kBAAU;oBA+ElC,WAAA,EAAA,oBAAA;oBAEA,SA9EyB,EA8EzB,YAAA;oBACA,cAAA,EAAA,iBAAA;oBACA,SAAA,EAAA,kBAAA;oBAEA,YAAA,EAAA,eA9EyB;oBA+EzB,cAAA,EAAA,uBAAA;oBACA,OAAA,EA9EyB,YAAY;oBA+ErC,MAAA,EAAA,QA9EyB;oBA+EzB,UAAA,EAAA,GAAA;oBACA,sBAAA,EAAA,UAAA;oBAEA,sBAAA,EAAA,KAAA;oBACA,sBAAA,EAAA,KAAA;oBACA,sBA9EqC,EA8ErC,OAAA;oBACA,qBAAA,EAAA,oBAAA;oBACA,oBAAA,EAAA,uCAAA;oBAEA,kBAAA,EAAA,iBA9EqD;oBA+ErD,6BAAA,EAAA,UAAA;;;;;;oBA3EA,6BAAA,EAAA,UAAA;;;iBAoFA;gBACA,QAAA,EAAA,irBAAA;gBAEA,MAAA,EAAA,CAAA,u2MAAA,CAAA;gBACU,MAAV,EAAA,CAAA,UAAA,CAAA;gBACQ,aAAR,EAAAD,+BAAA,CAjFwC,IAiFxC;aACO,EAAP,EAAA;CACA,CAAA;;;;AAGA,QAAA,CAAA,cAjFmB,GAiFnB,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAAD,uBAAA,GAAU;IACV,EAAA,IAAA,EAAAD,wBAjFQ,GAiFR;IACA,EAAA,IAAA,EAAA,kBAAA,GAAiB;IACjB,EAAA,IAAA,EAAA,GAAA,EAAA,UAAA,EAAA,CAAA,EAAgB,IAAhB,EAAAD,sBAAA,EAAA,EAAA,EAAA;CACA,CAAA,EAAA,CAAA;AACA,QAAA,CAAA,cAAA,GAjFY;IAkFZ,QAAA,EAAA,CAjFE,EAAG,IAiFL,EAAAD,mBAAA,EAAA,EAAA;IACA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;;;;IA/EA,uBAAC,EAAD,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA;IAoFA,cAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IACA,yBAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,IAAA,EAAA,CAAA,eAAA,EAAA,EAAA,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAA0B;IAC1B,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,mBAAA,EAAA,EAAA;IACA,QAAO,EAAP,CAAA,EAAA,IAAgB,EAAhBD,oBAAA,EAAA,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAe,EAAfA,oBAAA,EAAA,EAAA;CACA,CAAA;;;;;AAKA,IAAA,cAAA,IAAA,YAnF0B;;;;IAuF1B,SAAA,cAnFsB,CAmFtB,UAAA,EAnF+B;QAoF/B,IAAA,CAAA,cAAA,GAAA,UAAA,CAnFqC,aAAE,CAmFvC;KACA;;;;;;;;;QA6DA,OAAA,cAAA,CAAA,qBAAA,EAAA,CAAA;;;;;;;IA5GA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAA0C;;;;CA4H1C,EAAA,CAAA,CAAA;;;;IAIA,OAAA,cAAA,CAAA;;;;gBAIA,OAAA,EAAA,CAAAF,4BAAA,EAzIGC,0BAyIH,EAAA,cAAA,EAAA,WAAA,EAAA,SAAA,CAAA;;;;aAtIA,EAAA,EAAA;CAEA,CAAA;;;;;;;;;;;;;;;;;;;IAqKA,MAAA,IAAA,KAAA,CAAA,qBAAA,GA/IiC,QA+IjC,GAAA,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;IAqBA,SAAA,SAAA,CAAA,QAAA,EAAA,WA/IiC,EA+IjC,iBAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,EAAA;;;QAIA,IAAM,CAAN,WAAA,GAAA,WAAA,CAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;;QAKA,IAAA,CAAA,SAAA,GAAA,OAAA,CAAA;QACI,IAAJ,CAAA,SAAA,GAAA,KAAA,CAAA;;;;;;;;QAQA,IAAA,CAAA,SAAA,GAAA,CAAA,CAAA;;;;;;SAMA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,SAAA,CAAA,SAAA,EAAA,UAAA,EAAA;;;;;QAhJA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,SAAqD,CAArD,EAAA;;;;;QAoJA,GAAA,EAAA,UAAA,KAAA,EAAA;YAlJA,IAAoB,KAAM,KAA1B,IAAA,CAAA,SAA6C,EAA7C;gBAAqD,IAArD,CAAA,SAAA,GAAA,KAAA,CAAA;;;gBACuD,IAAvD,IAAA,CAAA,gBAAA,EAAA;oBAmJA,IAlJW,CAkJX,eAAA,EAAA,CAAA;iBAlJA;aAAA;SAmJA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YArJmB,EAqJnB,OAAA,IAAA,CAAA,SAAA,CAAA,EAAA;;;;;;;;;gBASA,IAAA,CAAA,IAAA,CArJG,CAqJH,CAAA,CAAA;aACA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,SAAA,CAAA,EAAA;;;;;QAIA,GAAA,EAAA,UArJmB,KAqJnB,EArJyB,EAqJzB,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA,EAAA;QACA,UAAA,EAAA,IAAU;QACV,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,SAAA,CAAA,SAAA,EAAA,SAAA,EAAA;;;;;QAKA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,QAAA,CAAA,EAAA;;;;;QAKA,GAAA,EAAA,UAAA,KAAA,EAAA;YACA,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA;YACA,IAAA,IAAA,CAAA,gBAAA,EAAA;gBACA,IAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;;;;;KAKA,CAAA,CAAA;IAtJA,MAAA,CAAA,cAAA,CAAA,SAAA,CAAA,SAAA,EAAA,oBAAA,EAAA;;;;;QD7eA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,OAAA,CAAA,EAAA;;;;;QAEA,GAAA,EAAA,UAAA,CAAA,EAAA,EAAA,IAAA,CAGmB,OAHnB,GAAA,CAAA,CAAA,EAAA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;QDXA,GAAA,EAAA,YAAA,EAAA,OAAA,IAAA,CAAA,OAAA,CAAA,EAAA;;;;;;QDAA,UAAA,EAAA,IAAA;;KAEA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}